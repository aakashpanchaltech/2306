USE [DERF_DB]
GO
/****** Object:  Table [dbo].[Assignee_DS]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Assignee_DS](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Org_Id] [int] NULL,
	[Txn_Id] [int] NOT NULL,
	[Finacle_chk] [bit] NOT NULL,
	[Finacle_notchk_reason] [varchar](200) NULL,
	[Format_chk] [bit] NOT NULL,
	[Source] [varchar](50) NOT NULL,
	[DS_Msg] [varchar](max) NULL,
	[Upld_DS_Link] [varchar](50) NULL,
	[DS_SQL] [varchar](max) NULL,
	[Free_text1] [varchar](50) NULL,
	[Free_text2] [varchar](50) NULL,
	[DS_Date] [datetime] NOT NULL,
	[DS_Name] [varchar](100) NULL,
	[Delivery_Mode] [varchar](100) NULL,
	[Data_Type] [varchar](50) NULL,
	[Data_Status] [varchar](50) NULL,
	[Data_Status_Date] [datetime] NULL,
	[Disc_Details] [varchar](max) NULL,
	[Validation_Source] [varchar](50) NULL,
	[Stream_Name] [varchar](250) NULL,
	[App_Name] [varchar](250) NULL,
	[Validation_FName] [varchar](250) NULL,
	[Validation_FPath] [varchar](250) NULL,
	[Disc_Approver] [varchar](10) NULL,
	[Disc_status] [varchar](50) NULL,
	[Disc_Date] [datetime] NULL,
	[Disc_App_Com] [varchar](max) NULL,
 CONSTRAINT [PK_DERF_Assignee_DS] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Assignee_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Assignee_Table](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [varchar](10) NOT NULL,
	[Added_Date] [datetime] NOT NULL,
	[Added_By] [varchar](10) NOT NULL,
	[Deleted_Date] [datetime] NULL,
	[Deleted_Flg] [bit] NOT NULL,
	[Modify_By] [varchar](10) NULL,
 CONSTRAINT [PK_Assignee_Table] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Assigner_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Assigner_Table](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [varchar](10) NOT NULL,
	[Added_Date] [datetime] NOT NULL,
	[Added_By] [varchar](10) NOT NULL,
	[Deleted_date] [datetime] NULL,
	[Deleted_flg] [bit] NOT NULL,
	[Modify_by] [varchar](10) NULL,
 CONSTRAINT [PK_Assinor_Table] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CALENDAR_HOLIDAY]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CALENDAR_HOLIDAY](
	[zone_name] [nvarchar](50) NOT NULL,
	[region_name] [nvarchar](50) NOT NULL,
	[sol_id] [nvarchar](50) NOT NULL,
	[br_code] [nvarchar](50) NOT NULL,
	[sol_desc] [nvarchar](50) NOT NULL,
	[mmyyyy] [int] NOT NULL,
	[calendar_date] [datetime2](7) NOT NULL,
	[hldy_flg] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_CALENDAR_HOLIDAY] PRIMARY KEY CLUSTERED 
(
	[sol_id] ASC,
	[calendar_date] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cr_Categories]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cr_Categories](
	[CategoryID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[CreatedAt] [datetime] NULL,
	[ParentID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cr_CommitLogs]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cr_CommitLogs](
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[CommitID] [uniqueidentifier] NOT NULL,
	[Action] [nvarchar](50) NOT NULL,
	[Comment] [nvarchar](max) NULL,
	[PerformedBy] [nvarchar](128) NOT NULL,
	[PerformedAt] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cr_Commits]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cr_Commits](
	[CommitID] [uniqueidentifier] NOT NULL,
	[RepositoryID] [int] NOT NULL,
	[UserID] [varchar](10) NOT NULL,
	[Title] [varchar](200) NOT NULL,
	[Description] [text] NOT NULL,
	[Wiki] [text] NOT NULL,
	[CodeSnippets] [text] NOT NULL,
	[Status] [varchar](10) NULL,
	[CreatedTimestamp] [datetime] NULL,
	[ApprovedTimestamp] [datetime] NULL,
	[ApproverID] [varchar](10) NULL,
	[Comments] [text] NULL,
	[AssignedApproverID] [varchar](10) NULL,
	[IsInitialCommit] [bit] NOT NULL,
 CONSTRAINT [PK__Cr_Commi__73748B5203D8DF50] PRIMARY KEY CLUSTERED 
(
	[CommitID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cr_CommitUserLikes]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cr_CommitUserLikes](
	[CommitUserLikeID] [int] IDENTITY(1,1) NOT NULL,
	[CommitID] [uniqueidentifier] NOT NULL,
	[UserID] [varchar](10) NOT NULL,
	[LikedAt] [datetime] NOT NULL,
 CONSTRAINT [PK_Cr_CommitUserLikes] PRIMARY KEY CLUSTERED 
(
	[CommitUserLikeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_Commit_User_Like] UNIQUE NONCLUSTERED 
(
	[CommitID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cr_Repositories]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cr_Repositories](
	[RepositoryID] [int] IDENTITY(1,1) NOT NULL,
	[CreatorID] [varchar](10) NOT NULL,
	[Title] [varchar](200) NOT NULL,
	[Status] [varchar](10) NULL,
	[CreatedAt] [datetime] NULL,
	[UpdatedAt] [datetime] NULL,
	[Comments] [text] NULL,
	[AssignedApproverID] [varchar](10) NULL,
	[CommitCount] [int] NULL,
	[IsInitialRequest] [bit] NOT NULL,
 CONSTRAINT [PK__Cr_Repos__B9BA86F1D9A7D326] PRIMARY KEY CLUSTERED 
(
	[RepositoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cr_RepositoryCategories]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cr_RepositoryCategories](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RepositoryID] [int] NULL,
	[CategoryID] [int] NOT NULL,
	[ParentCategoryID] [int] NULL,
 CONSTRAINT [PK_Cr_RepositoryCategories_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cr_RepositoryTags]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cr_RepositoryTags](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RepositoryID] [int] NOT NULL,
	[TagID] [int] NOT NULL,
 CONSTRAINT [PK_Cr_RepositoryTags] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cr_Tags]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cr_Tags](
	[TagID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[TagID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cr_UserFavouriteRepositories]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cr_UserFavouriteRepositories](
	[UserFavouriteRepositoryID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](10) NOT NULL,
	[RepositoryID] [int] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[UserFavouriteRepositoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_User_Repository] UNIQUE NONCLUSTERED 
(
	[UserID] ASC,
	[RepositoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Dept_Excp_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Dept_Excp_Table](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[User_Id] [varchar](10) NOT NULL,
	[Sol_Id] [varchar](8) NOT NULL,
	[Branch_Alpha] [varchar](12) NOT NULL,
	[Dept_Id] [int] NOT NULL,
	[Designation] [varchar](50) NOT NULL,
	[Designation_Desc] [varchar](50) NOT NULL,
	[Added_Date] [datetime] NOT NULL,
	[Added_By] [varchar](10) NOT NULL,
	[Approved_Date] [datetime] NULL,
	[Approved_By] [varchar](10) NULL,
	[Deleted_Flg] [bit] NOT NULL,
	[Deleted_Date] [datetime] NULL,
	[Modify_By] [varchar](10) NULL,
	[File_Name] [varchar](250) NULL,
	[Start_Date] [datetime] NULL,
	[End_Date] [datetime] NULL,
	[Data_App_Type] [varchar](50) NULL,
 CONSTRAINT [PK_Dept_Excp_Table] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Dept_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Dept_Table](
	[Dept_Id] [int] IDENTITY(1,1) NOT NULL,
	[Zone] [varchar](50) NULL,
	[Region] [varchar](50) NULL,
	[Sol_Id] [varchar](10) NULL,
	[Branch_Alpha] [varchar](10) NULL,
	[Dept_Name] [varchar](100) NOT NULL,
	[Added_Date] [datetime] NOT NULL,
	[Added_By] [varchar](10) NOT NULL,
	[Deleted_Date] [datetime] NULL,
	[Deleted_Flg] [bit] NOT NULL,
	[Modify_By] [varchar](10) NULL,
 CONSTRAINT [PK_Dept_Table] PRIMARY KEY CLUSTERED 
(
	[Dept_Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DERF_Comm_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DERF_Comm_Table](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Old_Id] [int] NULL,
	[DERF_Id] [int] NOT NULL,
	[Step] [varchar](50) NOT NULL,
	[Msg] [varchar](max) NOT NULL,
	[User_Msg] [varchar](max) NULL,
	[User_Id] [varchar](10) NOT NULL,
	[To_User_Id] [varchar](10) NULL,
	[Msg_Date] [datetime] NOT NULL,
	[Notify_Status] [bit] NULL,
	[Notify_Date] [datetime] NULL,
	[Email] [bit] NULL,
	[Email_Date] [datetime] NULL,
 CONSTRAINT [PK_DERF_Comm_Table] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DERF_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DERF_Table](
	[Id] [int] IDENTITY(400000,1) NOT NULL,
	[Old_Id] [int] NULL,
	[Created_By] [varchar](10) NOT NULL,
	[Created_Date] [datetime] NOT NULL,
	[Creater_Name] [varchar](50) NULL,
	[Zone_Name] [varchar](100) NULL,
	[Region_Name] [varchar](255) NULL,
	[Branch_Alpha] [varchar](10) NULL,
	[Office_Type] [varchar](50) NULL,
	[Dept_Name] [varchar](50) NOT NULL,
	[Dept_Email] [varchar](50) NOT NULL,
	[Contact_Name] [varchar](50) NOT NULL,
	[Contact_Number] [varchar](50) NOT NULL,
	[Alt_Contact_Number] [varchar](50) NULL,
	[Data_Pertain] [varchar](50) NOT NULL,
	[Data_Type] [varchar](50) NOT NULL,
	[Purpose] [varchar](50) NOT NULL,
	[PurposeDetails] [varchar](255) NULL,
	[PurposeSubCat] [varchar](50) NULL,
	[PII_Flg] [bit] NOT NULL,
	[Dev_Type] [varchar](50) NULL,
	[Period_Months] [real] NULL,
	[Stream_Name] [varchar](150) NULL,
	[App_Name] [varchar](255) NULL,
	[Sheet_Name] [varchar](255) NULL,
	[Extract_Type] [varchar](50) NULL,
	[Frequency] [varchar](50) NULL,
	[Text] [varchar](max) NOT NULL,
	[File_Format] [varchar](100) NULL,
	[Endorsed_By] [varchar](10) NULL,
	[Endorsed_Date] [datetime] NULL,
	[Approved_By] [varchar](10) NULL,
	[Approved_Date] [datetime] NULL,
	[Assigned_By] [varchar](10) NULL,
	[Assigned_Date] [datetime] NULL,
	[Initiated_By] [varchar](10) NULL,
	[Initiated_Date] [datetime] NULL,
	[Edmo_App_By] [varchar](10) NULL,
	[Edmo_App_Date] [datetime] NULL,
	[Status] [varchar](50) NOT NULL,
	[Status_date] [datetime] NOT NULL,
	[Category] [varchar](10) NULL,
 CONSTRAINT [PK_DERF_Table] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DERF_Txn_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DERF_Txn_Table](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DERF_Id] [int] NOT NULL,
	[Category] [varchar](10) NOT NULL,
	[Assignment_Date] [datetime] NOT NULL,
	[Assigned_To] [varchar](10) NOT NULL,
	[Assigned_By] [varchar](10) NOT NULL,
	[Assigner_Name] [varchar](50) NULL,
	[Comments] [varchar](250) NULL,
	[Sheet_Name] [varchar](100) NULL,
	[Work_status] [varchar](50) NULL,
	[Work_Status_date] [datetime] NULL,
	[Last_DS_Date] [datetime] NULL,
	[Delete_Flg] [bit] NOT NULL,
	[Delete_Date] [datetime] NULL,
	[Modify_By] [varchar](10) NULL,
 CONSTRAINT [PK_DERF_Txn] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EMP_Detail_temp]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMP_Detail_temp](
	[userid] [nvarchar](255) NULL,
	[ecno] [nvarchar](255) NULL,
	[employee_name] [nvarchar](255) NULL,
	[zone] [nvarchar](255) NULL,
	[region] [nvarchar](255) NULL,
	[branch_alpha] [nvarchar](255) NULL,
	[sol_id] [nvarchar](255) NULL,
	[dept_name] [nvarchar](255) NULL,
	[grade] [nvarchar](255) NULL,
	[position] [nvarchar](255) NULL,
	[designation] [nvarchar](255) NULL,
	[email] [nvarchar](255) NULL,
	[mobile_no] [nvarchar](255) NULL,
	[organization_type] [nvarchar](255) NULL,
	[dept_id] [float] NULL,
	[isadmin] [float] NULL,
	[sysroles] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Login_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Login_Table](
	[UserId] [varchar](10) NOT NULL,
	[UserPass] [nvarchar](max) NOT NULL,
 CONSTRAINT [PK_Login_Table] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Report_Formats]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Report_Formats](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[App_Id] [int] NOT NULL,
	[Sheet_No] [int] NOT NULL,
	[Fields] [varchar](max) NULL,
	[Added_By] [varchar](10) NOT NULL,
	[Added_Date] [datetime] NOT NULL,
	[Del_Flg] [bit] NOT NULL,
	[Deleted_By] [varchar](50) NULL,
	[Deleted_Date] [datetime] NULL,
 CONSTRAINT [PK_Report_Formats] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Roles]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Roles](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserPower] [nvarchar](20) NOT NULL,
	[CreatedBy] [nvarchar](10) NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[Delete_Flg] [bit] NOT NULL,
	[DeletedBy] [nvarchar](10) NULL,
	[DeletedDate] [datetime] NULL,
 CONSTRAINT [PK_User_Role] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Stream_List]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Stream_List](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Stream_Name] [varchar](250) NOT NULL,
	[Added_By] [varchar](10) NOT NULL,
	[Added_Date] [datetime] NOT NULL,
	[Deleted_Flg] [bit] NOT NULL,
	[Deleted_By] [varchar](10) NULL,
	[Deleted_Date] [datetime] NULL,
 CONSTRAINT [PK_Stream_List] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Stream_Report_Details]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Stream_Report_Details](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Stream_Id] [int] NOT NULL,
	[App_Name] [varchar](200) NOT NULL,
	[Template_Name] [varchar](250) NULL,
	[No_Of_Sheets] [int] NOT NULL,
	[Text_SQL] [text] NULL,
	[Created_By] [varchar](10) NULL,
	[Created_Time] [datetime] NULL,
	[Published_By] [varchar](10) NULL,
	[Published_Date] [datetime] NULL,
	[Added_By] [varchar](10) NULL,
	[Added_Date] [datetime] NULL,
	[Modified_By] [varchar](10) NULL,
	[Modified_Time] [datetime] NULL,
	[Del_Flg] [bit] NOT NULL,
	[Deleted_By] [varchar](10) NULL,
	[Delete_Time] [datetime] NULL,
 CONSTRAINT [PK_Stream_Report_Details] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Stream_Report_Details_old]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Stream_Report_Details_old](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Stream_Name] [varchar](100) NOT NULL,
	[App_Name] [varchar](200) NOT NULL,
	[Created_By] [varchar](10) NULL,
	[Created_Time] [datetime] NULL,
	[Modified_By] [varchar](10) NULL,
	[Modified_Time] [datetime] NULL,
	[Del_Flg] [bit] NOT NULL,
	[Delete_Time] [datetime] NULL,
 CONSTRAINT [PK_Stream_Report_Details_old] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[User_Hist_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[User_Hist_Table](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [varchar](10) NOT NULL,
	[EcNo] [varchar](10) NULL,
	[Employee_Name] [varchar](255) NULL,
	[Zone] [varchar](100) NULL,
	[Region] [varchar](255) NULL,
	[Branch_Alpha] [varchar](10) NULL,
	[Sol_Id] [varchar](10) NULL,
	[Dept_Name] [varchar](255) NULL,
	[Grade] [varchar](50) NULL,
	[Position] [varchar](255) NULL,
	[Designation] [varchar](100) NULL,
	[Email] [varchar](255) NULL,
	[Mobile_No] [varchar](100) NULL,
	[Organization_Type] [varchar](50) NULL,
	[Dept_Id] [int] NULL,
	[Role_Id] [int] NULL,
	[Lchg_Date] [datetime] NULL,
	[Lchg_by] [char](10) NULL,
 CONSTRAINT [PK_User_Hist_Table] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[User_Table]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[User_Table](
	[UserId] [varchar](10) NOT NULL,
	[EcNo] [varchar](10) NULL,
	[Employee_Name] [varchar](255) NOT NULL,
	[Zone] [varchar](100) NULL,
	[Region] [varchar](255) NULL,
	[Branch_Alpha] [varchar](10) NULL,
	[Sol_Id] [varchar](10) NULL,
	[Dept_Name] [varchar](255) NULL,
	[Grade] [varchar](50) NULL,
	[Position] [varchar](255) NULL,
	[Designation] [varchar](100) NULL,
	[Email] [varchar](255) NULL,
	[Mobile_No] [varchar](100) NULL,
	[Organization_Type] [varchar](50) NULL,
	[Dept_Id] [int] NULL,
	[Role_Id] [int] NULL,
	[Lchg_Date] [datetime] NULL,
	[Lchg_by] [varchar](10) NULL,
 CONSTRAINT [PK_User_Table] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[User_Table_old]    Script Date: 6/25/2025 10:26:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[User_Table_old](
	[UserId] [varchar](10) NOT NULL,
	[EcNo] [varchar](10) NULL,
	[Employee_Name] [varchar](255) NOT NULL,
	[Zone] [varchar](100) NULL,
	[Region] [varchar](255) NULL,
	[Branch_Alpha] [varchar](10) NULL,
	[Sol_Id] [varchar](10) NULL,
	[Dept_Name] [varchar](255) NULL,
	[Grade] [varchar](50) NULL,
	[Position] [varchar](255) NULL,
	[Designation] [varchar](100) NULL,
	[Email] [varchar](255) NULL,
	[Mobile_No] [varchar](100) NULL,
	[Organization_Type] [varchar](50) NULL,
	[Dept_Id] [int] NULL,
	[IsAdmin] [bit] NOT NULL,
	[SysRoles] [varchar](50) NULL,
 CONSTRAINT [PK_User_Table_old] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Cr_CommitLogs] ADD  CONSTRAINT [DF_Cr_CommitLogs_PerformedAt]  DEFAULT (getdate()) FOR [PerformedAt]
GO
ALTER TABLE [dbo].[Cr_Commits] ADD  CONSTRAINT [DF__Cr_Commit__Commi__43A1090D]  DEFAULT (newid()) FOR [CommitID]
GO
ALTER TABLE [dbo].[Cr_Commits] ADD  CONSTRAINT [DF__Cr_Commit__Creat__44952D46]  DEFAULT (getdate()) FOR [CreatedTimestamp]
GO
ALTER TABLE [dbo].[Cr_Commits] ADD  DEFAULT ((0)) FOR [IsInitialCommit]
GO
ALTER TABLE [dbo].[Cr_CommitUserLikes] ADD  CONSTRAINT [DF_Cr_CommitUserLikes_LikedAt]  DEFAULT (getdate()) FOR [LikedAt]
GO
ALTER TABLE [dbo].[Cr_Repositories] ADD  DEFAULT ((0)) FOR [IsInitialRequest]
GO
ALTER TABLE [dbo].[Cr_UserFavouriteRepositories] ADD  DEFAULT (getdate()) FOR [CreatedAt]
GO
ALTER TABLE [dbo].[Assignee_DS]  WITH CHECK ADD  CONSTRAINT [FK_Assignee_DS_DERF_Txn_Table] FOREIGN KEY([Txn_Id])
REFERENCES [dbo].[DERF_Txn_Table] ([Id])
GO
ALTER TABLE [dbo].[Assignee_DS] CHECK CONSTRAINT [FK_Assignee_DS_DERF_Txn_Table]
GO
ALTER TABLE [dbo].[Assignee_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Assignee_Table_User_Table] FOREIGN KEY([UserId])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Assignee_Table] NOCHECK CONSTRAINT [FK_Assignee_Table_User_Table]
GO
ALTER TABLE [dbo].[Assignee_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Assignee_Table_User_Table1] FOREIGN KEY([Added_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Assignee_Table] NOCHECK CONSTRAINT [FK_Assignee_Table_User_Table1]
GO
ALTER TABLE [dbo].[Assignee_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Assignee_Table_User_Table2] FOREIGN KEY([Modify_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Assignee_Table] NOCHECK CONSTRAINT [FK_Assignee_Table_User_Table2]
GO
ALTER TABLE [dbo].[Assigner_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Assignor_Table_User_Table] FOREIGN KEY([UserId])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Assigner_Table] NOCHECK CONSTRAINT [FK_Assignor_Table_User_Table]
GO
ALTER TABLE [dbo].[Assigner_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Assignor_Table_User_Table1] FOREIGN KEY([Modify_by])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Assigner_Table] NOCHECK CONSTRAINT [FK_Assignor_Table_User_Table1]
GO
ALTER TABLE [dbo].[Assigner_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Assignor_Table_User_Table2] FOREIGN KEY([Added_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Assigner_Table] NOCHECK CONSTRAINT [FK_Assignor_Table_User_Table2]
GO
ALTER TABLE [dbo].[Cr_CommitLogs]  WITH CHECK ADD  CONSTRAINT [FK_Cr_CommitLogs_Commits] FOREIGN KEY([CommitID])
REFERENCES [dbo].[Cr_Commits] ([CommitID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Cr_CommitLogs] CHECK CONSTRAINT [FK_Cr_CommitLogs_Commits]
GO
ALTER TABLE [dbo].[Cr_Commits]  WITH CHECK ADD  CONSTRAINT [FK__Cr_Commit__Assig__3CBF0154] FOREIGN KEY([AssignedApproverID])
REFERENCES [dbo].[User_Table] ([UserId])
GO
ALTER TABLE [dbo].[Cr_Commits] CHECK CONSTRAINT [FK__Cr_Commit__Assig__3CBF0154]
GO
ALTER TABLE [dbo].[Cr_Commits]  WITH CHECK ADD  CONSTRAINT [FK__Cr_Commit__Repos__477199F1] FOREIGN KEY([RepositoryID])
REFERENCES [dbo].[Cr_Repositories] ([RepositoryID])
GO
ALTER TABLE [dbo].[Cr_Commits] CHECK CONSTRAINT [FK__Cr_Commit__Repos__477199F1]
GO
ALTER TABLE [dbo].[Cr_Commits]  WITH CHECK ADD  CONSTRAINT [FK_Cr_Commits_User_Table] FOREIGN KEY([UserID])
REFERENCES [dbo].[User_Table] ([UserId])
GO
ALTER TABLE [dbo].[Cr_Commits] CHECK CONSTRAINT [FK_Cr_Commits_User_Table]
GO
ALTER TABLE [dbo].[Cr_CommitUserLikes]  WITH CHECK ADD  CONSTRAINT [FK_Cr_CommitUserLikes_Cr_Commits] FOREIGN KEY([CommitID])
REFERENCES [dbo].[Cr_Commits] ([CommitID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Cr_CommitUserLikes] CHECK CONSTRAINT [FK_Cr_CommitUserLikes_Cr_Commits]
GO
ALTER TABLE [dbo].[Cr_CommitUserLikes]  WITH CHECK ADD  CONSTRAINT [FK_Cr_CommitUserLikes_User_Table] FOREIGN KEY([UserID])
REFERENCES [dbo].[User_Table] ([UserId])
GO
ALTER TABLE [dbo].[Cr_CommitUserLikes] CHECK CONSTRAINT [FK_Cr_CommitUserLikes_User_Table]
GO
ALTER TABLE [dbo].[Cr_Repositories]  WITH CHECK ADD  CONSTRAINT [FK_Cr_Repositories_User_Table] FOREIGN KEY([CreatorID])
REFERENCES [dbo].[User_Table] ([UserId])
GO
ALTER TABLE [dbo].[Cr_Repositories] CHECK CONSTRAINT [FK_Cr_Repositories_User_Table]
GO
ALTER TABLE [dbo].[Cr_RepositoryCategories]  WITH CHECK ADD  CONSTRAINT [FK__Cr_Reposi__Repos__4B422AD5] FOREIGN KEY([RepositoryID])
REFERENCES [dbo].[Cr_Repositories] ([RepositoryID])
GO
ALTER TABLE [dbo].[Cr_RepositoryCategories] CHECK CONSTRAINT [FK__Cr_Reposi__Repos__4B422AD5]
GO
ALTER TABLE [dbo].[Cr_RepositoryCategories]  WITH CHECK ADD  CONSTRAINT [FK_Cr_RepositoryCategories_Cr_Categories] FOREIGN KEY([CategoryID])
REFERENCES [dbo].[Cr_Categories] ([CategoryID])
GO
ALTER TABLE [dbo].[Cr_RepositoryCategories] CHECK CONSTRAINT [FK_Cr_RepositoryCategories_Cr_Categories]
GO
ALTER TABLE [dbo].[Cr_RepositoryTags]  WITH CHECK ADD  CONSTRAINT [FK_Cr_RepositoryTags_Cr_Repositories] FOREIGN KEY([RepositoryID])
REFERENCES [dbo].[Cr_Repositories] ([RepositoryID])
GO
ALTER TABLE [dbo].[Cr_RepositoryTags] CHECK CONSTRAINT [FK_Cr_RepositoryTags_Cr_Repositories]
GO
ALTER TABLE [dbo].[Cr_RepositoryTags]  WITH CHECK ADD  CONSTRAINT [FK_Cr_RepositoryTags_Cr_Tags] FOREIGN KEY([TagID])
REFERENCES [dbo].[Cr_Tags] ([TagID])
GO
ALTER TABLE [dbo].[Cr_RepositoryTags] CHECK CONSTRAINT [FK_Cr_RepositoryTags_Cr_Tags]
GO
ALTER TABLE [dbo].[Cr_UserFavouriteRepositories]  WITH CHECK ADD  CONSTRAINT [FK_Cr_UserFavouriteRepositories_Cr_Repositories] FOREIGN KEY([RepositoryID])
REFERENCES [dbo].[Cr_Repositories] ([RepositoryID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Cr_UserFavouriteRepositories] CHECK CONSTRAINT [FK_Cr_UserFavouriteRepositories_Cr_Repositories]
GO
ALTER TABLE [dbo].[Cr_UserFavouriteRepositories]  WITH CHECK ADD  CONSTRAINT [FK_Cr_UserFavouriteRepositories_User_Table] FOREIGN KEY([UserID])
REFERENCES [dbo].[User_Table] ([UserId])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Cr_UserFavouriteRepositories] CHECK CONSTRAINT [FK_Cr_UserFavouriteRepositories_User_Table]
GO
ALTER TABLE [dbo].[Dept_Excp_Table]  WITH CHECK ADD  CONSTRAINT [FK_Dept_Excp_Table_Dept_Table] FOREIGN KEY([Dept_Id])
REFERENCES [dbo].[Dept_Table] ([Dept_Id])
GO
ALTER TABLE [dbo].[Dept_Excp_Table] CHECK CONSTRAINT [FK_Dept_Excp_Table_Dept_Table]
GO
ALTER TABLE [dbo].[Dept_Excp_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Dept_Excp_Table_User_Table] FOREIGN KEY([Added_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Dept_Excp_Table] NOCHECK CONSTRAINT [FK_Dept_Excp_Table_User_Table]
GO
ALTER TABLE [dbo].[Dept_Excp_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Dept_Excp_Table_User_Table1] FOREIGN KEY([Modify_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Dept_Excp_Table] NOCHECK CONSTRAINT [FK_Dept_Excp_Table_User_Table1]
GO
ALTER TABLE [dbo].[Dept_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Dept_Table_User_Table] FOREIGN KEY([Modify_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Dept_Table] NOCHECK CONSTRAINT [FK_Dept_Table_User_Table]
GO
ALTER TABLE [dbo].[Dept_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_Dept_Table_User_Table1] FOREIGN KEY([Added_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Dept_Table] NOCHECK CONSTRAINT [FK_Dept_Table_User_Table1]
GO
ALTER TABLE [dbo].[DERF_Comm_Table]  WITH CHECK ADD  CONSTRAINT [FK_DERF_Comm_Table_DERF_Table] FOREIGN KEY([DERF_Id])
REFERENCES [dbo].[DERF_Table] ([Id])
GO
ALTER TABLE [dbo].[DERF_Comm_Table] CHECK CONSTRAINT [FK_DERF_Comm_Table_DERF_Table]
GO
ALTER TABLE [dbo].[DERF_Comm_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_DERF_Comm_Table_User_Table] FOREIGN KEY([User_Id])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[DERF_Comm_Table] NOCHECK CONSTRAINT [FK_DERF_Comm_Table_User_Table]
GO
ALTER TABLE [dbo].[DERF_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_DERF_Table_User_Table] FOREIGN KEY([Created_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[DERF_Table] NOCHECK CONSTRAINT [FK_DERF_Table_User_Table]
GO
ALTER TABLE [dbo].[DERF_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_DERF_Table_User_Table1] FOREIGN KEY([Approved_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[DERF_Table] NOCHECK CONSTRAINT [FK_DERF_Table_User_Table1]
GO
ALTER TABLE [dbo].[DERF_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_DERF_Table_User_Table2] FOREIGN KEY([Assigned_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[DERF_Table] NOCHECK CONSTRAINT [FK_DERF_Table_User_Table2]
GO
ALTER TABLE [dbo].[DERF_Txn_Table]  WITH CHECK ADD  CONSTRAINT [FK_DERF_Txn_Table_DERF_Table] FOREIGN KEY([DERF_Id])
REFERENCES [dbo].[DERF_Table] ([Id])
GO
ALTER TABLE [dbo].[DERF_Txn_Table] CHECK CONSTRAINT [FK_DERF_Txn_Table_DERF_Table]
GO
ALTER TABLE [dbo].[DERF_Txn_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_DERF_Txn_Table_User_Table] FOREIGN KEY([Assigned_To])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[DERF_Txn_Table] NOCHECK CONSTRAINT [FK_DERF_Txn_Table_User_Table]
GO
ALTER TABLE [dbo].[DERF_Txn_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_DERF_Txn_Table_User_Table1] FOREIGN KEY([Assigned_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[DERF_Txn_Table] NOCHECK CONSTRAINT [FK_DERF_Txn_Table_User_Table1]
GO
ALTER TABLE [dbo].[DERF_Txn_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_DERF_Txn_Table_User_Table2] FOREIGN KEY([Modify_By])
REFERENCES [dbo].[User_Table_old] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[DERF_Txn_Table] NOCHECK CONSTRAINT [FK_DERF_Txn_Table_User_Table2]
GO
ALTER TABLE [dbo].[Report_Formats]  WITH CHECK ADD  CONSTRAINT [FK_Report_Formats_Stream_Report_Details] FOREIGN KEY([App_Id])
REFERENCES [dbo].[Stream_Report_Details_old] ([Id])
GO
ALTER TABLE [dbo].[Report_Formats] CHECK CONSTRAINT [FK_Report_Formats_Stream_Report_Details]
GO
ALTER TABLE [dbo].[Stream_Report_Details]  WITH CHECK ADD  CONSTRAINT [FK_Stream_Report_Details_Stream_List] FOREIGN KEY([Stream_Id])
REFERENCES [dbo].[Stream_List] ([Id])
GO
ALTER TABLE [dbo].[Stream_Report_Details] CHECK CONSTRAINT [FK_Stream_Report_Details_Stream_List]
GO
ALTER TABLE [dbo].[User_Hist_Table]  WITH CHECK ADD  CONSTRAINT [FK_USERID_User_Hist_Table_User_Table] FOREIGN KEY([UserId])
REFERENCES [dbo].[User_Table_old] ([UserId])
GO
ALTER TABLE [dbo].[User_Hist_Table] CHECK CONSTRAINT [FK_USERID_User_Hist_Table_User_Table]
GO
ALTER TABLE [dbo].[User_Table]  WITH NOCHECK ADD  CONSTRAINT [FK_User_Table_Dept_Table] FOREIGN KEY([Dept_Id])
REFERENCES [dbo].[Dept_Table] ([Dept_Id])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[User_Table] NOCHECK CONSTRAINT [FK_User_Table_Dept_Table]
GO
ALTER TABLE [dbo].[User_Table]  WITH CHECK ADD  CONSTRAINT [FK_User_Table_Roles] FOREIGN KEY([Role_Id])
REFERENCES [dbo].[Roles] ([Id])
GO
ALTER TABLE [dbo].[User_Table] CHECK CONSTRAINT [FK_User_Table_Roles]
GO
ALTER TABLE [dbo].[User_Table_old]  WITH NOCHECK ADD  CONSTRAINT [FK_User_Table_Dept_Table_old] FOREIGN KEY([Dept_Id])
REFERENCES [dbo].[Dept_Table] ([Dept_Id])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[User_Table_old] NOCHECK CONSTRAINT [FK_User_Table_Dept_Table_old]
GO
ALTER TABLE [dbo].[User_Table_old]  WITH NOCHECK ADD  CONSTRAINT [FK_User_Table_Login_Table_old] FOREIGN KEY([UserId])
REFERENCES [dbo].[Login_Table] ([UserId])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[User_Table_old] NOCHECK CONSTRAINT [FK_User_Table_Login_Table_old]
GO
ALTER TABLE [dbo].[Cr_Commits]  WITH CHECK ADD  CONSTRAINT [CK_Cr_Commits_Status] CHECK  (([Status]='Draft' OR [Status]='UFU' OR [Status]='UPD' OR [Status]='Rejected' OR [Status]='Approved' OR [Status]='Pending' OR [Status]='Deleted'))
GO
ALTER TABLE [dbo].[Cr_Commits] CHECK CONSTRAINT [CK_Cr_Commits_Status]
GO
ALTER TABLE [dbo].[Cr_Repositories]  WITH CHECK ADD  CONSTRAINT [CK_Cr_Repositories_Status] CHECK  (([Status]='Draft' OR [Status]='UFU' OR [Status]='UPD' OR [Status]='Rejected' OR [Status]='Public' OR [Status]='Pending' OR [Status]='Deleted'))
GO
ALTER TABLE [dbo].[Cr_Repositories] CHECK CONSTRAINT [CK_Cr_Repositories_Status]
GO
















<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=301880
  -->
<configuration>
  <configSections>
        <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
        <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    </configSections>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
    <add key="EmailSender" value="172.16.126.59" />
    <add key="EmailSenderPort" value="25" />
    <add key="EmailOTPSender" value="172.16.126.59" />
    <add key="EmailOTPSenderPort" value="25" />
  </appSettings>
  
  <system.web>
    <compilation debug="true" targetFramework="4.8" />
    <httpRuntime targetFramework="4.8" maxRequestLength="4096" /> <!--Value in KB upload file limit-->
    <!--authentication is used for login-->
    <authentication mode="Forms">
      <forms loginUrl="Login" timeout="100"></forms>
    </authentication>
    
    <!--Defining role based action-->
    <roleManager enabled="true" defaultProvider="RoleDefinition" cookieProtection="All">
      <providers>
        <clear />
        <add name="RoleDefinition" type="UI.Models.UserRoles" /><!--custom Rele defined-->
      </providers>
    </roleManager>
    
    <sessionState timeout="120"></sessionState>

    

  </system.web>

  <system.webServer>
    <security>
      <requestFiltering>
        <requestLimits maxAllowedContentLength="30000000" /> <!--Value in Byte upload file limit-->
      </requestFiltering>
    </security>

    <staticContent>
      <clientCache cacheControlCustom="public" cacheControlMode="UseMaxAge" cacheControlMaxAge="365.00:00:00" />
      <remove fileExtension=".woff" />
      <remove fileExtension=".woff2" />
      <mimeMap fileExtension=".woff" mimeType="application/x-font-woff" />
      <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
      <remove fileExtension=".webmanifest" />
      <mimeMap fileExtension=".webmanifest" mimeType="application/json" />
    </staticContent>
  
  <handlers>
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
    </handlers></system.webServer>

  <location path="DERF/DataFileUpload">
    <system.web>
      <httpRuntime targetFramework="4.8" maxRequestLength="4194304" executionTimeout="1500" />
    </system.web>
    <system.webServer>
      <security>
        <requestFiltering>
          <requestLimits maxAllowedContentLength="4294967295" />
        </requestFiltering>
      </security>
    </system.webServer>
  </location>

  <location path="DERF/FileUpload">
    <system.web>
      <httpRuntime targetFramework="4.8" maxRequestLength="4096" executionTimeout="100" />
    </system.web>
  </location>
  
  <location path="Calendar/Add">
    <system.web>
      <httpRuntime targetFramework="4.8" maxRequestLength="409600" executionTimeout="1500" />
    </system.web>
    <system.webServer>
      <security>
        <requestFiltering>
          <requestLimits maxAllowedContentLength="419430400" />
        </requestFiltering>
      </security>
    </system.webServer>
  </location>
  
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Web.Infrastructure" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.0.0.0" newVersion="2.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.9.0" newVersion="5.2.9.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-13.0.0.0" newVersion="13.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <connectionStrings>
    <add name="DERF_DB_1Entities" connectionString="metadata=res://*/DERFModel.csdl|res://*/DERFModel.ssdl|res://*/DERFModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=DWHTD203;initial catalog=DERF_DB;persist security info=True;user id=sa;password=Welcome1;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
    <add name="Excel07ConString" connectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};extended properties='Excel 12.0;HDR=YES;'" />
    
  </connectionStrings>
  <entityFramework>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
</configuration>











using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using DTO;
using BLL;
using System.Net.Mail;
using System.IO;
using System.Net;

namespace UI.Controllers
{
    
    public class LoginController : Controller
    {
        LoginBLL loginbll = new LoginBLL();
        // GET: Login
        [AllowAnonymous]
        public ActionResult Index()
        {
            LoginDTO dto = new LoginDTO ();

            SessionDTO session = (SessionDTO)Session["UserInfo"];
            if (session != null && User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Index", "Home");
            }

            return View(dto);
        }
        [AllowAnonymous]
        [HttpPost]
        public ActionResult Index(LoginDTO model)
        {
            if(ModelState.IsValid)
            { 
            LoginDTO login = loginbll.GetUserWithUserIdAndPass(model);

            if(login.logbit)
            {
                FormsAuthentication.SetAuthCookie(model.UserId, false);
                Session.Add("UserId", model.UserId);
                return RedirectToAction("Auth");
            }
            else
            {
                 ViewBag.ErrorMsg = login.msg;
                model.UserPass = string.Empty;
                return View(model);
            }
            }
            else 
            {
                ViewBag.ErrorMsg = "User Id and Password should not be blank";
                model.UserPass = string.Empty;
                return View(model);
            }

            //if (login.UserId != null)
            //{
            //    SessionDTO session = new SessionDTO();

            //    session.UserId = login.UserId;
            //    session.IsAdmin = login.IsAdmin;
            //    session.SysRole = login.SysRole;
            //    session.DeptId = login.DeptId;
            //    session.DeptName = login.DepartName;
            //    session.BranchAlpha = login.BranchAlpha;
                
            //    HttpCookie cookie = new HttpCookie("UserId");
            //    cookie.Value = login.UserId.ToString();
            //    FormsAuthentication.SetAuthCookie(model.UserId, false);
            //    Session.Add("UserInfo", session);
            //    Session.Add("UserId", login.UserId);
                
            //    return RedirectToAction("Index", "Home");
            //}
            //else
            //{
            //    ViewBag.ErrorMsg = login.msg;
            //    model.UserPass = string.Empty;
            //    return View(model);
            //}
                
            //}
            //else 
            //{
            //    ViewBag.ErrorMsg = "User Id and Password should not be blank";
            //    model.UserPass = string.Empty;
            //    return View(model); 
            //}
            
        }
        
        public ActionResult Auth()
        {
            if (HttpContext.Session["UserId"] == null)
            {
                return RedirectToAction("Index");
            }
            UserBLL user = new UserBLL();

            string emailId = user.GetUserDetails(Session["UserId"].ToString()).Email;
            //string mobileNo = "8291445655";//user.GetUserDetails(Session["UserId"].ToString()).Mobile;

            string cacheKey = "OtpGeneration";
            string newOtp = HttpRuntime.Cache[cacheKey] as string;

            //if (string.IsNullOrEmpty(newOtp))
            //{
            //    newOtp = BetterRandom.NextAlphanumberic();
                
            //    HttpRuntime.Cache.Insert(
            //    cacheKey,
            //    newOtp,
            //    null,
            //    DateTime.Now.AddMinutes(3), // Absolute expiration in 5 minutes
            //    System.Web.Caching.Cache.NoSlidingExpiration // No sliding expiration
            //    );

                
            //}

            

            //string url = "http://172.16.252.133:9002/axiomdbrec/pushlistener?dcode=4199&subuid=4198&pwd=PJeMcm0Q9d0RIGOwPnloHQ==&sender=BOBOTP&pno=" + mobileNo
            //    + "&msgtxt=Hi, Your userId 7896 has been created in Axiom. Please use OTP " + newOtp + " (valid for next 10 minutes) to access first time login link on login page and set password for Axiom -BOB&intflag=1&msgtype=S&alert=1";
            //StreamWriter myWriter = null;
            //HttpWebRequest objRequest = (HttpWebRequest)WebRequest.Create(url);

            //objRequest.Method = "POST";
            //objRequest.ContentLength = Encoding.UTF8.GetByteCount(url);
            //objRequest.ContentType = "application/x-www-form-urlencoded";

            //try
            //{
            //    myWriter = new StreamWriter(objRequest.GetRequestStream());
            //    myWriter.Write(url);
            //}
            //catch (Exception e) {
            //    Console.WriteLine(e);
            //}
            //finally
            //{
            //    myWriter.Close();
            //}

            if (!EmailOTP(newOtp, emailId))
            {
                ViewBag.OTPMsg = "OTP sending failed.";
                return View();
            };

            TempData.Clear();
            TempData["OTPVarification"] = newOtp;
            TempData["timestamp"] = DateTime.Now;
            ViewBag.OTPMsg = "OTP sent to " + OtpSendTo.OtpString(emailId);
            
            return View();
        }

        [HttpPost]
        public ActionResult Auth(string OtpText, string action)
        {
            if (action == "Resent")
            {
                if (HttpRuntime.Cache["OtpGeneration"] != null)
                {
                    HttpRuntime.Cache.Remove("OtpGeneration");
                }

                return RedirectToAction("Auth");
        
            }
            if(true)
            //if (TempData.ContainsKey("OTPVarification") && TempData["OTPVarification"].ToString() == OtpText && (DateTime.Now - Convert.ToDateTime(TempData["timestamp"])).TotalSeconds <= 180 )
            {
                TempData.Remove("OTPVarification");
                TempData.Remove("timestamp");
                HttpRuntime.Cache.Remove("OtpGeneration");
                //UserBLL user = new UserBLL();

                //UserDTO login = user.GetUserDetails(Session["UserId"].ToString());

                LoginDTO login = loginbll.GetLoginDetails(Session["UserId"].ToString());

                SessionDTO session = new SessionDTO();

                session.UserId = login.UserId;
                session.IsAdmin = login.IsAdmin;
                session.SysRole = login.SysRole;
                session.DeptId = login.DeptId;
                session.DeptName = login.DepartName;
                session.BranchAlpha = login.BranchAlpha;

                HttpCookie cookie = new HttpCookie("UserId");
                cookie.Value = login.UserId.ToString();
                FormsAuthentication.SetAuthCookie(Session["UserId"].ToString(), false);
                Session.Add("UserInfo", session);
                Session.Add("UserId", login.UserId);

                

                return RedirectToAction("Index", "Home");

                
            }

            //TempData.Clear();
            TempData.Keep("OTPVarification");
            TempData.Keep("timestamp");
            ViewBag.OTPMsg = "Entered OTP is wrong. Try Again!";
            return View();
        }




        private bool EmailOTP(string OTPstr, string ToUserEmail)
        {
            EmailDTO dto = new EmailDTO();
            dto.Subject = "BANK INTERNAL | OTP for DERF Portal Login";
            dto.To = ToUserEmail;

            using (StreamReader reader = new StreamReader(Server.MapPath("~/App_Data/MailTemplates/OTPTemplate.html")))
            {
                dto.Body = reader.ReadToEnd();

                dto.ImagePath1 = Server.MapPath("~/dist/images/boblogoformail.png");
                dto.ImagePath2 = Server.MapPath("~/dist/images/derfportallogoformail.png");


            }


            dto.Body = dto.Body.Replace("{{OTP}}", OTPstr);
            try
            {
                EmailSendStaticBLL.EmailOTPSend(dto);
            }
            catch (Exception ex)
            {
                Console.Write(ex);
                return false;
            }
            

            return true;
        }

        private static class OtpSendTo
        {
            public static string OtpString(string OtpStrg)
            {
                string part1, part2 = string.Empty;
                string[] words = OtpStrg.Split(new char[]{'@'},2,StringSplitOptions.RemoveEmptyEntries);
                if(words.Length == 0)
                    return "";

                if (words.Length == 1)
                {
                    part1 = words[0];
                    part1 = part1.Substring(0, 3) + "*****" + part1.Substring(part1.Length - 2, 2);

                    return part1;
                }

                part1 = words[0];
                part2 = words[1];
                part1 = part1.Substring(0, 3) + "...@";


                return part1 + part2;

            }
 
        }

        private static class BetterRandom
        {
            private static readonly ThreadLocal<System.Security.Cryptography.RandomNumberGenerator> crng = new ThreadLocal<System.Security.Cryptography.RandomNumberGenerator>(System.Security.Cryptography.RandomNumberGenerator.Create);
            private static readonly ThreadLocal<byte[]> bytes = new ThreadLocal<byte[]>(() => new byte[sizeof(long)]);
            private static readonly ThreadLocal<string> charactor = new ThreadLocal<string>(() => { return "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; });
            public static string NextAlphanumberic()
            {
                crng.Value.GetBytes(bytes.Value);
                char[] tempOtp = new char[6];
                string otp = string.Empty;
                for (int i = 0; i < tempOtp.Length; i++)
                {
                    tempOtp[i] = charactor.Value[bytes.Value[i] % charactor.Value.Length];
                }
                otp = new string(tempOtp);
                return otp;
            }

        }

        public ActionResult Logout()
        {
            FormsAuthentication.SignOut();
            Session.Clear();
            return RedirectToAction("Index");
        }
    }
}















using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Newtonsoft.Json;
using BLL;
using DTO;

namespace UI.Controllers
{
    public class UsersController : Controller
    {

        readonly UserBLL userBll = new UserBLL();
        readonly DepartmentsBLL departmentsBll = new DepartmentsBLL();
        readonly RolesBLL rolesBll = new RolesBLL();
        // GET: User
        public ActionResult Index()
        {
            //List<UserDTO> userList = userBll.GetUserList().OrderBy(c=>c.DeptId).Take(20).ToList();
            return View();
        }

        [HttpPost]
        public JsonResult UsersTotal()
        {
            int TotalCnt = userBll.GetUserCount();
            var data = JsonConvert.SerializeObject(TotalCnt);
            return Json(data, JsonRequestBehavior.AllowGet); 
        }

        [HttpPost]
        public JsonResult Users(int Start = 0, int NoOfRecords = 20)
        {
            List<UserDTO> Users = userBll.GetUserList(Start, NoOfRecords);
            //List<UserDTO> Users = userBll.GetUserList(Start, NoOfRecords).OrderBy(c => c.UserId).Skip(Start).Take(NoOfRecords).ToList();
            var data = JsonConvert.SerializeObject(Users);
            return Json(data, JsonRequestBehavior.AllowGet); 
        }

        [HttpPost]
        public JsonResult SearchUsersTotal(string SearchString)
        {
            if (string.IsNullOrEmpty(SearchString))
            {
                RedirectToAction("UsersTotal");
            }
            int TotalCnt = userBll.GetUserCount(SearchString);
            var data = JsonConvert.SerializeObject(TotalCnt);
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult SearchUsers(string SearchString, int Start = 0, int NoOfRecords = 20)
        {
            if (string.IsNullOrEmpty(SearchString))
            {
                RedirectToAction("Users");
            }
            List<UserDTO> Users = userBll.GetUserList(SearchString, Start, NoOfRecords);
            var data = JsonConvert.SerializeObject(Users);
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult Details(string UserId)
        {
            if (string.IsNullOrEmpty(UserId))
            {
                RedirectToAction("Index");
            }

            UserDetailsDTO details = new UserDetailsDTO() { user = userBll.GetUserDetails(UserId) ,
                                                            departments = departmentsBll.departments(),
                                                            roles = rolesBll.roles()
            };
            
            return View(details);
        }

        [HttpPost]
        public JsonResult UserUpdate(UserDTO dto)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            bool chk;
            userBll.UserUpdate(dto,session.UserId, out chk);
            return Json(true, JsonRequestBehavior.AllowGet);
        }
    }
}
















using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using BLL;

namespace UI.Models
{
    public class UserRoles : RoleProvider
    {

        UserBLL userbll = new UserBLL();

        public override void AddUsersToRoles(string[] usernames, string[] roleNames)
        {
            throw new NotImplementedException();
        }

        public override string ApplicationName
        {
            get
            {
                throw new NotImplementedException();
            }
            set
            {
                throw new NotImplementedException();
            }
        }

        public override void CreateRole(string roleName)
        {
            throw new NotImplementedException();
        }

        public override bool DeleteRole(string roleName, bool throwOnPopulatedRole)
        {
            throw new NotImplementedException();
        }

        public override string[] FindUsersInRole(string roleName, string usernameToMatch)
        {
            throw new NotImplementedException();
        }

        public override string[] GetAllRoles()
        {
            throw new NotImplementedException();
        }

        public override string[] GetRolesForUser(string UserId)
        {
            var result = userbll.GetUserRoles(UserId);

            return result;
        }

        public override string[] GetUsersInRole(string roleName)
        {
            throw new NotImplementedException();
        }

        public override bool IsUserInRole(string username, string roleName)
        {
            throw new NotImplementedException();
        }

        public override void RemoveUsersFromRoles(string[] usernames, string[] roleNames)
        {
            throw new NotImplementedException();
        }

        public override bool RoleExists(string roleName)
        {
            throw new NotImplementedException();
        }
    }
}













@{

    ViewBag.Title = "Login-Auth";
    Layout = null;
}


<!DOCTYPE html>
<html lang="en" class="light">
<!-- BEGIN: Head -->
<head>
    <meta charset="utf-8" />
    <link rel="apple-touch-icon"
          sizes="180x180"
          href="~/dist/images/apple-touch-icon.png" />
    <link rel="icon"
          type="image/png"
          sizes="32x32"
          href="~/dist/images/favicon-32x32.png" />
    <link rel="icon"
          type="image/png"
          sizes="16x16"
          href="~/dist/images/favicon-16x16.png" />
    <link rel="manifest" href="~/dist/images/site.webmanifest" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description"
          content="Derf as Data Extraction request form for DWH." />
    <meta name="keywords" content="derf, data, dwh, report" />
    <meta name="author" content="PK117835" />
    <title>@ViewBag.Title</title>
    <!-- BEGIN: CSS Assets-->
    <link href="~/dist/css/app_full.css" rel="stylesheet" />

    <!-- END: CSS Assets-->
</head>
<!-- END: Head -->
<body class="login">


    <div class="container sm:px-10">
        <div class="block xl:grid grid-cols-2 gap-4">

            <!-- BEGIN: Login Info -->
            <div class="hidden xl:flex flex-col min-h-screen">
                <div class="login-bg-large-left" style="
    background-image: url(../dist/images/lg_bg_login.png) !important;
    width: 833px !important;
    height: 970px !important;
    margin-left: -194px !important;
    z-index: 999 !important;
    position: relative !important;
    margin-top: -10px !important;
">
                </div>


            </div>
            <!-- END: Login Info -->
            <!-- BEGIN: Login Form -->
            @using (@Html.BeginForm("Auth", "Login", FormMethod.Post, new { @class = "h-screen xl:h-auto flex py-5 xl:py-0 my-10 xl:my-0" }))
            {
                @*<div class="h-screen xl:h-auto flex py-5 xl:py-0 my-10 xl:my-0">*@

                <div class="my-auto mx-auto xl:ml-20 bg-white dark:bg-darkmode-600 xl:bg-transparent px-5 sm:px-8 py-8 xl:p-0 rounded-md shadow-md xl:shadow-none w-full sm:w-3/4 lg:w-2/4 xl:w-auto">
                    <div>
                        <img alt="BoB Logo" class="-intro-x w-3/4 -mt-44 -ml-8" src="/dist/images/Bank_of_Baroda_Logo_withoutBG.png" style="
    margin-top: -409px;
    margin-left: 539px;
    width: 286px;
    padding-bottom: 198px;
">
                    </div>
                    <h2 class="intro-x font-bold text-2xl xl:text-3xl text-center xl:text-left">
                        Enter OTP
                    </h2>
                    <div class="intro-x mt-2 text-slate-400 xl:hidden text-center">
                        A few more clicks to sign in to your account.
                    </div>

                    <div class="intro-x mt-8" style="width: 343px;
">
                        <input type="text"
                               class="intro-x login__input form-control py-3 px-4 block"
                               placeholder="OTP" name="OtpText" />
                    </div>
                    @if (ViewBag.OTPMsg != null)
                    {
                        <div class="intro-x flex text-slate-600 dark:text-slate-500 text-xs sm:text-sm mt-4">
                            <h3 style="color:red">@ViewBag.OTPMsg</h3>
                        </div>
                    }

                    <div class="intro-x mt-5 xl:mt-8 text-center xl:text-left">
                        <button class="btn btn-primary py-3 px-4 w-full xl:w-32 xl:mr-3 align-top" type="submit" name="action"  >
                            Sign In
                        </button>
                        <button class="btn btn-outline-secondary py-3 px-4 w-full xl:w-32 xl:mr-3 align-top" type="submit" name="action" value="Resent" id="ResentBtn">
                            Re-send <span id="countdown"></span>
                        </button>
                        
                    </div>

                </div>

            }
            <!-- END: Login Form -->
        </div>
    </div>





    <!-- BEGIN: JS Assets-->
    <script src="~/dist/js/app.js"></script>
    <script src="~/Scripts/jquery-3.6.3.min.js"></script>
    <script>
        $(document).ready(function ()
        {
            $("#ResentBtn").prop('disabled', true);

            let timer = 60;

            function updateCountdown()
            {
                //var minutes = Math.floor(timer / 60);
                let seconds = timer % 60;
                $('#countdown').text('(' + (seconds < 10 ? '0' : '') + seconds+')');

                // Check if timer is done
                if (timer === 0)
                {
                    clearInterval(countdownInterval);
                    $('#ResentBtn').prop('disabled', false);
                    $('#countdown').text('');
                } else
                {
                    timer--;
                }
            }

            updateCountdown();
            let countdownInterval = setInterval(updateCountdown, 1000);
        });
    </script>
    <!-- END: JS Assets-->

</body>
</html>












@{

    ViewBag.Title = "Login - DERF - Datawarehouse";
    Layout = null;
}

@model DTO.LoginDTO

<!DOCTYPE html>
<html lang="en" class="light">
<!-- BEGIN: Head -->
<head>
    <meta charset="utf-8" />
    <link rel="apple-touch-icon"
          sizes="180x180"
          href="~/dist/images/apple-touch-icon.png" />
    <link rel="icon"
          type="image/png"
          sizes="32x32"
          href="~/dist/images/favicon-32x32.png" />
    <link rel="icon"
          type="image/png"
          sizes="16x16"
          href="~/dist/images/favicon-16x16.png" />
    <link rel="manifest" href="~/dist/images/site.webmanifest" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description"
          content="Derf as Data Extraction request form for DWH." />
    <meta name="keywords" content="derf, data, dwh, report" />
    <meta name="author" content="PK117835" />
    <title>@ViewBag.Title</title>
    <!-- BEGIN: CSS Assets-->
    <link href="~/dist/css/app_full.css" rel="stylesheet" />

    <!-- END: CSS Assets-->
</head>
<!-- END: Head -->
<body class="login">

    
        <div class="container sm:px-10">
            @*<style>
                .ticker-container {
                    overflow-x: hidden;
                    width: 100%;
                    height: 2rem;
                    display: flex;
                    color: #F15A29;
                    margin-bottom: 1rem;
                }

                .ticker-text p {
                    font-size: medium;
                    background-color: white;
                    padding: 0 1rem 0 1rem;
                }
            </style>
            <div class="ticker-container">
                <div class="ticker-text">
                    <p>
                        Dear Sir/Madam, As part of the Business Continuity Plan (BCP), a scheduled switchover of the DERF Portal is planned for 20th January 2024,
                        Please note that the portal will be unavailable during the maintenance window: Date: 20th January 2024 Time: 04:00 PM to 06:00 PM.
                        We kindly request you to plan accordingly and ensure that any necessary data is raised and downloaded prior to the scheduled downtime.Thank you for your cooperation.
                        ?????? ?????/??????,
                        ??????? ???????? ????? (BCP) ?? ???????, 20 ????? 2024 ?? DERF ?????? ?? ????????? ???????? ???? ??????
                        ????? ????? ??? ?? ?????? ?????????? ??????? ??? ???????? ?????:
                        ????: 20 ????? 2024
                        ???: ??????? 04:00 ??? ?? ??? 06:00 ??? ??
                        ???? ?????? ?? ?? ????????? ??? ?? ???? ?????? ???? ?? ???? (raise) ?? ??????? ?? ????
                        ???? ????? ?? ??? ????????
                    </p>
                </div>
            </div>*@
            <div class="block xl:grid grid-cols-2 gap-4">

                <!-- BEGIN: Login Info -->
                <div class="hidden xl:flex flex-col min-h-screen">

                    @*<a href="" class="-intro-x flex items-start pt-4">
                        <img alt="DERF Logo"
                             class="w-[28rem] -ml-28 -mt-8"
                             src="~/dist/images/derf_login_dwh.png" />
                    </a>*@
                    @*<div class="">
                        <img alt="BoB Logo"
                             class="-intro-x -ml-28 w-full "
                             src="~/dist/images/derf_login_dwh.png" />
                    </div>*@
                    <div class="login-bg-large-left" style="
    background-image: url(../dist/images/lg_bg_login.png) !important;
    width: 833px !important;
    height: 970px !important;
    margin-left: -194px !important;
    z-index: 999 !important;
    position: relative !important;
    margin-top: -10px !important;
">
                    </div>


                </div>
                <!-- END: Login Info -->
                <!-- BEGIN: Login Form -->
                @using (@Html.BeginForm("Index", "Login", FormMethod.Post, new { @class = "h-screen xl:h-auto flex py-5 xl:py-0 my-10 xl:my-0" }))
                {
                    @*<div class="h-screen xl:h-auto flex py-5 xl:py-0 my-10 xl:my-0">*@

                    <div class="my-auto mx-auto xl:ml-20 bg-white dark:bg-darkmode-600 xl:bg-transparent px-5 sm:px-8 py-8 xl:p-0 rounded-md shadow-md xl:shadow-none w-full sm:w-3/4 lg:w-2/4 xl:w-auto">
                        <div>
                            <img alt="BoB Logo" class="-intro-x w-3/4 -mt-44 -ml-8" src="/dist/images/Bank_of_Baroda_Logo_withoutBG.png" style="
    margin-top: -409px;
    margin-left: 539px;
    width: 286px;
    padding-bottom: 198px;
">
                        </div>
                        <h2 class="intro-x font-bold text-2xl xl:text-3xl text-center xl:text-left">
                            Sign In
                        </h2>
                        <div class="intro-x mt-2 text-slate-400 xl:hidden text-center">
                            A few more clicks to sign in to your account.
                        </div>

                        <div class="intro-x mt-8" style="width: 343px;
">
                            <input type="text"
                                   class="intro-x login__input form-control py-3 px-4 block"
                                   placeholder="UserID" name="UserId" />
                            <input type="password"
                                   class="intro-x login__input form-control py-3 px-4 block mt-4"
                                   placeholder="Password" name="UserPass" />
                        </div>
                        @if (ViewBag.ErrorMsg != null)
                        {
                            <div class="intro-x flex text-slate-600 dark:text-slate-500 text-xs sm:text-sm mt-4">
                                <h3 style="color:red">@ViewBag.ErrorMsg</h3>
                            </div>
                        }
                        
                        <div class="intro-x mt-5 xl:mt-8 text-center xl:text-left">
                            <button class="btn btn-primary py-3 px-4 w-full xl:w-32 xl:mr-3 align-top">
                                Login
                            </button>
                        </div>

                    </div>

                }
                <!-- END: Login Form -->
                @*<canvas class="confetti" id="canvas"></canvas>*@
            </div>
        </div>

   



    <!-- BEGIN: JS Assets-->
    <script src="~/dist/js/app.js"></script>
    <!-- END: JS Assets-->
   
</body>
</html>



















@model DTO.UserDetailsDTO

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_homeLayout.cshtml";
}

<div class="intro-y box pt-4 pb-8 mt-5">

    <div class="intro-y px-5 sm:px-20">
    @if (User.IsInRole("ADMIN"))
        {
        <div class="intro-y grid grid-cols-2 2xl:grid-cols-3 gap-y-5 my-5 gap-x-4 ">

            <div class="intro-y flex flex-col-reverse sm:flex-row items-center col-start-4">
                <a class="btn btn-primary shadow-md px-5" href="javascript:;" id="Edit"> &nbsp;&nbsp;Edit&nbsp;&nbsp;</a>
            </div>

        </div>
        }

        <div class="intro-y grid grid-cols-2 2xl:grid-cols-3 gap-y-5 my-5 gap-x-4" id="userDetails">
            <div class="grid grid-cols-3 items-center">
                <label for="UserId" class="form-label mr-2">User Ad Id:</label>
                <input type="text" id="UserId" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="UserId" value="@Model.user.UserId" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="EcNo" class="form-label mr-2">EC No:</label>
                <input type="text" id="EcNo" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="EcNo" value="@Model.user.EcNo" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="UserName" class="form-label mr-2">User Name:</label>
                <input type="text" id="UserName" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="UserName" value="@Model.user.UserName" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Zone" class="form-label mr-2">Zone Name:</label>
                <input type="text" id="Zone" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="Zone" value="@Model.user.Zone" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Region" class="form-label mr-2">Region Name:</label>
                <input type="text" id="Region" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="Region" value="@Model.user.Region" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="BranchAlpha" class="form-label mr-2">Branch Alpha:</label>
                <input type="text" id="BranchAlpha" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="BranchAlpha" value="@Model.user.BranchAlpha" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="SolId" class="form-label mr-2">Sol Id:</label>
                <input type="text" id="SolId" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="SolId" value="@Model.user.SolId" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="DepartmentName" class="form-label mr-2">Department Name1:</label>
                <input type="text" id="DepartmentName" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="DepartmentName" value="@Model.user.DepartmentName" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Grade" class="form-label mr-2">Grade:</label>
                <input type="text" id="Grade" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="Grade" value="@Model.user.Grade" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Position" class="form-label mr-2">Position:</label>
                <input type="text" id="Position" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="Position" value="@Model.user.Position" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Designation" class="form-label mr-2">Designation:</label>
                <input type="text" id="Designation" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="Designation" value="@Model.user.Designation" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Email" class="form-label mr-2">Email:</label>
                <input type="text" id="Email" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="Email" value="@Model.user.Email" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Mobile" class="form-label mr-2">Mobile:</label>
                <input type="text" id="Mobile" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="Mobile" value="@Model.user.Mobile" readonly>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Organization" class="form-label mr-2">Organization:</label>
                <input type="text" id="Organization" class="form-control col-span-2 add-product-in" aria-label="default input inline 2" name="Organization" value="@Model.user.Organization" readonly>
            </div>

            <div class="grid grid-cols-3 items-center">
                <label for="DeptId" class="form-label mr-2">Department Name:</label>
                <div class="form-control col-span-2">
                    <select class="form-control w-full" name="DeptId" id="DeptId">
                        @foreach (var item in Model.departments)
                        {
                            <option value="@item.Id">@item.DepartmentName</option>

                        }
                        <option value="0" selected>No Department Selected</option>
                        @*<option value="1">ALM Cell Risk Management</option>
                        <option value="2">Operations & Services</option>
                        <option value="3">Retail Liabilitiesr</option>
                        <option value="4">Large Corporate</option>
                        <option value="5">International IT</option>*@
                    </select>
                </div>
            </div>
            
            <div class="grid grid-cols-3 items-center">
                <label for="Roles" class="form-label mr-2">Role:</label>
                <div class="form-control col-span-2">
                    <select class="form-control w-full" name="Roles" id="Roles">
                        @foreach (var item in Model.roles)
                        {
                            <option value="@item.Id">@item.UserPower</option>
                        }
                    </select>
                </div>
                   
             </div>


        </div>
@if (User.IsInRole("ADMIN"))
        {
        <div class="gap-y-5 my-5 gap-x-4">
            <div class="overflow-hidden" style="clear:both">
                <button class="btn btn-primary w-36 ml-2 float-right hidden" id="submit_btn" type="button">SUBMIT <i data-lucide="chevrons-right" class="w-4 h-4 ml-2"></i></button>
            </div>

        </div>
        }

    </div>
</div>




@section Scripts{
   <script>
       $(function ()
       {
           $("#DeptId").val(@Model.user.DeptId).select();
           $("#DeptId").prop("disabled", true);
           $("#Roles").val(@Model.user.RoleId).select();
           $("#Roles").prop("disabled", true);
           if (@User.IsInRole("ADMIN").ToString().ToLower()){
               $("#Edit").click(function (){
                            $("#userDetails input[type='text']").not("#UserId,#EcNo,#UserName").prop("readonly", false);
                            $("#userDetails select").prop("disabled", false);
                            $("#submit_btn").removeClass("hidden");});

           $("#submit_btn").click(function(e){
               e.preventDefault();
               let _formdata = new FormData();
               _formdata.append("UserId", $("#UserId").val());
               _formdata.append("Zone", $("#Zone").val());
               _formdata.append("Region", $("#Region").val());
               _formdata.append("BranchAlpha", $("#BranchAlpha").val());
               _formdata.append("SolId", $("#SolId").val());
               _formdata.append("DepartmentName", $("#DepartmentName").val());
               _formdata.append("Grade", $("#Grade").val());
               _formdata.append("Position", $("#Position").val());
               _formdata.append("Designation", $("#Designation").val());
               _formdata.append("Email", $("#Email").val());
               _formdata.append("Mobile", $("#Mobile").val());
               _formdata.append("Organization", $("#Organization").val());
               _formdata.append("DeptId", $("#DeptId :selected").val());
               _formdata.append("RoleId", $("#Roles :selected").val());
               
               const result = $.ajax({
                   method: "POST",
                   url: "../Users/UserUpdate",
                   data: _formdata,
                   dataType: "json",
                   contentType: false,
                   processData: false,
                   fail: function (res, err) {
                       console.log(err);
                   },

                });

               result.done(function(){
                   location.reload(true);
               });
               })
            }
            
       
           
       });

    </script>
    }













@*@model IEnumerable<DTO.UserDTO>*@

@{
    ViewBag.Title = "Users";
    Layout = "~/Views/Shared/_homeLayout.cshtml";
}

<div class="intro-y box pt-4 pb-8 mt-5">

    <div class="intro-y px-5 sm:px-20">

        <div class="intro-y grid grid-cols-2 2xl:grid-cols-3 gap-y-5 my-5 gap-x-4 ">
            <!-- BEGIN: Search -->
            <div class="intro-y flex flex-col-reverse sm:flex-row items-center">
                <div class="search flex">
                    <input type="text"
                           class="search__input form-control border-transparent"
                           placeholder="Search..." id="search" />
                    <i data-lucide="search"
                       class="search__icon dark:text-slate-500 cursor-pointer "></i>


                </div>

            </div>
            <!-- END: Search -->

        </div>

        <div class="grid grid-cols-2 2xl:grid-cols-3 gap-y-3 my-4 gap-x-4 overflow-auto col-span-12 bg-slate-100  border-t border-slate-200/60" style="max-height: 75vh">
            <table class="table box -mt-2 col-span-full overflow-x-hidden relative " id="tableCustom">
                <thead class="sticky top-0 z-50 box">
                    <tr>
                        <th class=" whitespace-nowrap" data-sort="">
                            UserId
                        </th>
                        <th class=" whitespace-nowrap" data-sort="">
                            EcNo
                        </th>
                        <th class=" whitespace-nowrap" data-sort="">
                            UserName
                        </th>
                        <th class="whitespace-nowrap" data-sort="">
                            Zone
                        </th>
                        <th class="whitespace-nowrap" data-sort="">
                            Region
                        </th>
                        <th class=" whitespace-nowrap" data-sort="">
                            BranchAlpha
                        </th>
                        <th class=" whitespace-nowrap" data-sort="">
                            SolId
                        </th>
                        <th class="whitespace-normal md:whitespace-nowrap lg:whitespace-nowrap"
                            data-sort="">
                            Designation
                        </th>
                        <th class="whitespace-normal md:whitespace-nowrap lg:whitespace-nowrap"
                            data-sort="">
                            
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr id="loader">
                        <td colspan="100">
                            <div class="flex items-center justify-center">
                                <i data-loading-icon="three-dots" class="w-8 h-8"></i>
                            </div>
                        </td>
                    </tr>



                </tbody>
            </table>

            <!-- BEGIN: Pagination -->
            <div class="col-span-full flex flex-wrap sm:flex-row sm:flex-nowrap items-center overflow-x-auto box mb-3" id="table-pagination">
                <nav class="w-auto sm:w-auto sm:mr-auto">
                    <ul class="pagination">
                        <li class="page-item" id="start-page">
                            <button type="button" class="page-link">
                                <i class="w-4 h-4" data-lucide="chevrons-left"></i>

                            </button>
                        </li>
                        <li class="page-item" id="prv-page">
                            <button type="button" class="page-link">
                                <i class="w-4 h-4" data-lucide="chevron-left"></i>

                            </button>
                        </li>
                        <li class="page-item" id="ext-page">
                            <button type="button" class="page-link">...</button>
                        </li>
                        <li class="page-item" id="nxt-page">
                            <button type="button" class="page-link">
                                <i class="w-4 h-4" data-lucide="chevron-right"></i>
                            </button>
                        </li>
                        <li class="page-item" id="end-page">
                            <button type="button" class="page-link">
                                <i class="w-4 h-4" data-lucide="chevrons-right"></i>
                            </button>
                        </li>

                    </ul>
                </nav>
            </div>
            <!-- END: Pagination -->

        </div>
        @*<div class="grid grid-cols-2 2xl:grid-cols-3 gap-y-5 my-5 gap-x-4 overflow-auto col-span-12 bg-slate-100 p-3">
            <table class="table table-report -mt-2 col-span-full overflow-x-hidden" id="tableCustom">
                <thead>
                    <tr>
                        <th class=" whitespace-nowrap" data-sort="">
                            UserId
                        </th>
                        <th class=" whitespace-nowrap" data-sort="">
                            EcNo
                        </th>
                        <th class=" whitespace-nowrap" data-sort="">
                            UserName
                        </th>
                        <th class="whitespace-nowrap" data-sort="">
                            Zone
                        </th>
                        <th class="whitespace-nowrap" data-sort="">
                            Region
                        </th>
                        <th class=" whitespace-nowrap" data-sort="">
                            BranchAlpha
                        </th>
                        <th class=" whitespace-nowrap" data-sort="">
                            SolId
                        </th>
                        <th class="whitespace-normal md:whitespace-nowrap lg:whitespace-nowrap"
                            data-sort="">
                            Designation
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr id="loader">
                        <td colspan="100">
                            <div class="flex items-center justify-center">
                                <i data-loading-icon="three-dots" class="w-8 h-8"></i>
                            </div>
                        </td>
                    </tr>



                </tbody>
            </table>



        </div>*@

        @*<div class="bg-slate-100 p-3">
            <!-- BEGIN: Pagination -->
            <div class="col-span-full flex flex-wrap sm:flex-row sm:flex-nowrap items-center overflow-x-auto" id="table-pagination">
                <nav class="w-auto sm:w-auto sm:mr-auto">
                    <ul class="pagination"></ul>
                </nav>
            </div>
            <!-- END: Pagination -->
        </div>*@





    </div>
</div>


@section Scripts{
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/additional-methods.min.js"></script>
<script src="~/dist/js/table.js?v1.0"></script>
<script>
    $(function ()
    {
        const dataTable = function(v){
            $("#tableCustom tbody").append(
                `<tr class="intro-x">
                            <td class="w-40">
                                <div class="whitespace-normal text-justify">
                                     ${v.UserId}
            </div>
        </td>
        <td class="w-40">
            <div class="whitespace-normal text-justify">
                 ${v.EcNo}
            </div>
        </td>
        <td>
            <div class="w-56 whitespace-normal text-justify line-clamp-3">
                ${v.UserName}
            </div>
        </td>
        <td>
            <div class="w-56 whitespace-normal text-justify line-clamp-3">
                ${v.Zone}
            </div>
        </td>
        <td>
            <div class="w-40 whitespace-normal text-justify line-clamp-3">
                ${v.Region}
            </div>
        </td>
        <td class="w-40">
            <div class="whitespace-normal text-justify">
                 ${v.BranchAlpha}
            </div>
        </td>
        <td class="w-40">
            <div class="whitespace-normal text-justify">
                 ${v.SolId}
            </div>
        </td>
        <td class="w-40">
            <div class="whitespace-normal text-justify line-clamp-3">
                ${v.Designation}
            </div>
        </td>
        <td>
            <div class="whitespace-normal text-justify">
                <button type = "button" class="flex items-center text-success details" value =${v.UserId} > 
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" icon-name="file-minus" data-lucide="file-minus" class="lucide lucide-file-minus block mx-auto"><path d="M14.5 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8">
                        </polyline><line x1="9" y1="15" x2="15" y2="15"></line></svg> More.. </button>
            </div>
        </td>
                            
    </tr>`);
        }

        urlObj.total = "../Users/UsersTotal";
        urlObj.totalData = "../Users/Users";
        urlObj.searchTotal= "../Users/SearchUsersTotal";
        urlObj.searchData = "../Users/SearchUsers";

        table(urlObj,dataTable);

        $("#tableCustom tbody").on("click",".details", function(){
            //console.log($(this).val()); 
            $this = $(this).val();
            //window.location.href = '../Users/Details?UserId='+$this;
            window.open('../Users/Details?UserId='+$this,'_blank');
        });
    })
//    $(function ()
//    {

////        $("#Users tbody").append(
////                `<tr class="intro-x">
////                            <td class="w-40">
////                                <div class="whitespace-normal text-justify">
////                                     ${v.UserId}
////        </div>
////    </td>
////    <td class="w-40">
////        <div class="whitespace-normal text-justify">
////             ${v.EcNo}
////        </div>
////    </td>
////    <td>
////        <div class="w-\[28rem\] whitespace-normal text-justify line-clamp-3">
////            ${v.UserName}
////        </div>
////    </td>
////    <td>
////        <div class="w-\[28rem\] whitespace-normal text-justify line-clamp-3">
////            ${v.Zone}
////        </div>
////    </td>
////    <td>
////        <div class="w-\[28rem\] whitespace-normal text-justify line-clamp-3">
////            ${v.Region}
////        </div>
////    </td>
////    <td class="w-40">
////        <div class="whitespace-normal text-justify">
////             ${v.BranchAlpha}
////        </div>
////    </td>
////    <td class="w-40">
////        <div class="whitespace-normal text-justify">
////             ${v.SolId}
////        </div>
////    </td>
////        //<td>
////        //    <div class="w-\[28rem\] whitespace-normal text-justify line-clamp-3">
////        //        ${v.DepartmentName}
////        //    </div>
////        //</td>
////        //<td class="w-40">
////        //    <div class="whitespace-normal text-justify">
////        //         ${v.Grade}
////        //    </div>
////        //</td>
////        //<td>
////        //    <div class="w-\[28rem\] whitespace-normal text-justify line-clamp-3">
////        //        ${v.Position}
////        //    </div>
////        //</td>
////    <td>
////        <div class="w-\[28rem\] whitespace-normal text-justify line-clamp-3">
////            ${v.Designation}
////        </div>
////    </td>
////        //<td class="w-40">
////        //    <div class="whitespace-normal text-justify">
////        //         ${v.Email}
////        //    </div>
////        //</td>
////        //<td class="w-40">
////        //    <div class="whitespace-normal text-justify">
////        //         ${v.Mobile}
////        //    </div>
////        //</td>
////        //<td class="w-40">
////        //    <div class="whitespace-normal text-justify">
////        //         ${v.Organization}
////        //    </div>
////        //</td>


////        //<td class="w-40">
////        //    <div class="whitespace-normal text-justify">
////        //         ${v.DeptId}
////        //    </div>
////        //</td>
////        //<td class="w-40">
////        //    <div class="whitespace-normal text-justify">
////        //         ${v.IsAdmin}
////        //    </div>
////        //</td>
////        //<td class="w-40">
////        //    <div class="whitespace-normal text-justify">
////        //         ${v.Roles}
////        //    </div>
////        //</td>
                            
////</tr>`);

//        const UserTable = function(v){
//            $("#Users tbody").append(
//                `<tr class="intro-x">
//                            <td class="w-40">
//                                <div class="whitespace-normal text-justify">
//                                     ${v.UserId}
//                                </div>
//                            </td>
//                            <td class="w-40">
//                                <div class="whitespace-normal text-justify">
//                                     ${v.EcNo}
//                                </div>
//                            </td>
//                            <td>
//                                <div class="w-56 whitespace-normal text-justify line-clamp-3">
//                                    ${v.UserName}
//                                </div>
//                            </td>
//                            <td>
//                                <div class="w-56 whitespace-normal text-justify line-clamp-3">
//                                    ${v.Zone}
//                                </div>
//                            </td>
//                            <td>
//                                <div class="w-40 whitespace-normal text-justify line-clamp-3">
//                                    ${v.Region}
//                                </div>
//                            </td>
//                            <td class="w-40">
//                                <div class="whitespace-normal text-justify">
//                                     ${v.BranchAlpha}
//                                </div>
//                            </td>
//                            <td class="w-40">
//                                <div class="whitespace-normal text-justify">
//                                     ${v.SolId}
//                                </div>
//                            </td>
//                            <td>
//                                <div class="w-40 whitespace-normal text-justify line-clamp-3">
//                                    ${v.Designation}
//                                </div>
//                            </td>
                            
                            
//                        </tr>`);
//                    }


        

//        //UserList.done(function (data)
//        //{
//        //    //console.log(data);
//        //    data = JSON.parse(data);

//        //    const PointerBucket = 50;
//        //    let BucketLength = Math.ceil(data.TotalCnt / PointerBucket);
//        //    console.log(data.TotalCnt);

//        //    for (i = 1; i <= BucketLength; i++)
//        //    {
//        //        if (i === 1)
//        //        {
//        //            $("#Users-pagination ul").append('<li class="page-item active"> <a class="page-link" href="javascript:void(0)" >' + i + '</a> </li>');
//        //            continue;
//        //        }

//        //        $("#Users-pagination ul").append('<li class="page-item"> <a class="page-link" href="javascript:void(0)">' + i + '</a> </li>')

//        //    }

//        //})


//        const PointerBucket = 20;


//        const tableData = function(_data){
//            $("#loader").addClass("hidden");
//            $("table#Users>tbody>tr").not("#loader").remove();
//            $.each(_data, (k, v) => {
//                UserTable(v);
//            });
              
//    };

        

        
//        const UserList= function(_url,_Start,_NoOfRecords, _SearchString){
//            let _data = JSON.stringify({SearchString:_SearchString,  Start: _Start, NoOfRecords: _NoOfRecords });
//            const UserList = $.ajax({
//                method: "POST",
//                url: _url,
//                data:_data,
//                dataType: "json",
//                contentType: "application/json",
//                fail: function (res, err)
//                {
//                    console.log(err);
//                }
//            });

//            UserList.done(function (data){
//                data = JSON.parse(data);
//                //console.log(data);
//                tableData(data);
//            });
//        }

//        const pagination = function(_BucketLength){
//            $("#Users-pagination ul").empty();
//            for (i = 1; i <= _BucketLength; i++)
//            {
//                if (i === 1)
//                {
//                    $("#Users-pagination ul").append('<li class="page-item active"> <a class="page-link" href="javascript:void(0)" >' + i + '</a> </li>');
//                    continue;
//                }

//                $("#Users-pagination ul").append('<li class="page-item"> <a class="page-link" href="javascript:void(0)">' + i + '</a> </li>')

//            }
//        }
//        const UsersTotal = $.ajax({
//            method: "POST",
//            url: "../Users/UsersTotal",
//            dataType: "json",
//            contentType: "application/json",
//            fail: function (res, err)
//            {
//                console.log(err);
//            }
//        });

//        UsersTotal.done(function(data){
//            data = JSON.parse(data);
//            const BucketLength = Math.ceil(data / PointerBucket);
//            let url = "../Users/Users";
//            //console.log(data);
            
//            pagination(BucketLength);
            
//            UserList(url);


//            $(".page-link").click(function(){
//                //console.log($(this).text());        
//                $("table#Users>tbody>tr").not("#loader").remove();
//                $("#loader").removeClass("hidden");
//                $(".page-item.active").removeClass("active");
//                $(this).parent().addClass("active");
//                let Pointer = $(this).text();
//                UserList(url,(Pointer-1)*PointerBucket,PointerBucket);

//            });

//        })

//        $("#search").keydown(function (e) {
//            let key = e.which;
//            if(key == 13 && $(this).val().length >0){
//                let _data = JSON.stringify({ SearchString: $(this).val() });
//                const SearchUsersTotal = $.ajax({
//                    method: "POST",
//                    url: "../Users/SearchUsersTotal",
//                    data:_data,
//                    dataType: "json",
//                    contentType: "application/json",
//                    fail: function (res, err)
//                    {
//                        console.log(err);
//                    }
//                });

//                SearchUsersTotal.done(function(data){
//                    data = JSON.parse(data);
//                    const BucketLength = Math.ceil(data / PointerBucket);
//                    let url = "../Users/SearchUsers";

//                    pagination(BucketLength);
            
//                    UserList(url,0,PointerBucket,$("#search").val());


//                    $(".page-link").click(function(){
//                        //console.log($(this).text());        
//                        $("table#Users>tbody>tr").not("#loader").remove();
//                        $("#loader").removeClass("hidden");
//                        $(".page-item.active").removeClass("active");
//                        $(this).parent().addClass("active");
//                        let Pointer = $(this).text();
//                        UserList(url,(Pointer-1)*PointerBucket,PointerBucket,$("#search").val());

//                    });

//                });

//            };
            
    
//        });

//        $(".search>:button").click(function (e) { 
//            e.preventDefault(); 
//            let event = $.Event("keydown");
//            event.which = 13;
//            $("#search").trigger(event);
//        });


        
        

//    })
</script>
}












using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Newtonsoft.Json;
using DTO;
using BLL;
using System.IO;
using System.Threading.Tasks;
using PagedList.Mvc;
using PagedList;
using System.Globalization;
using System.Web.Configuration;
//using System.Net.Mail;
//using System.Net.Mime;

namespace UI.Controllers
{

    public class DERFController : Controller
    {
        DERFBLL derfbll = new DERFBLL();
        UserBLL usrbll = new UserBLL();


        // GET: DERF

        public async Task<ActionResult> Index(string Tab, int? page)
        {
            //List<DERFDTO> dtolist = new List<DERFDTO>();

            DerfListViewModel VM = new DerfListViewModel();

            ViewBag.Page = "DERF List";

            SessionDTO session = (SessionDTO)Session["UserInfo"];

            if (session == null)
            { return RedirectToAction("Index", "Login"); }

            var CurrentOpen = await derfbll.CurrentOpenDERFList(session);
            var WIP = await derfbll.WipDERFList(session);
            var ApprovalPending = await derfbll.ApprovalPendingDERFList(session);
            var ApprovalSeeking = await derfbll.ApprovalSeekingDERFList(session);
            var ApprovalDone = await derfbll.ApprovalDoneDERFList(session);
            var RejectionDataApp = await derfbll.RejectionDataApprovalPendingDERFList(session);
            //VM.ClarificationRequired = await derfbll.ClarificationRequiredDERFList();
            //VM.ClosedDerf = await derfbll.ClosedDerfDERFList();
            var AllDerf = await derfbll.DERFList(session);


            VM.CurrentOpen = (Tab == "CurrentOpen") ? CurrentOpen.OrderByDescending(c => c.DERFId).ToPagedList(page ?? 1, 10) : CurrentOpen.OrderByDescending(c => c.DERFId).ToPagedList(1, 10);
            VM.WIP = (Tab == "WIP") ? WIP.OrderByDescending(c => c.DERFId).ToPagedList(page ?? 1, 10) : WIP.OrderByDescending(c => c.DERFId).ToPagedList(1, 10);
            VM.ApprovalPending = (Tab == "ApprovalPending") ? ApprovalPending.OrderByDescending(c => c.DERFId).ToPagedList(page ?? 1, 10) : ApprovalPending.OrderByDescending(c => c.DERFId).ToPagedList(1, 10);
            VM.ApprovalSeeking = (Tab == "ApprovalSeeking") ? ApprovalSeeking.OrderByDescending(c => c.DERFId).ToPagedList(page ?? 1, 10) : ApprovalSeeking.OrderByDescending(c => c.DERFId).ToPagedList(1, 10);
            VM.ApprovalDone = (Tab == "ApprovalDone") ? ApprovalDone.OrderByDescending(c => c.DERFId).ToPagedList(page ?? 1, 10) : ApprovalDone.OrderByDescending(c => c.DERFId).ToPagedList(1, 10);
            VM.RejectionDataApp = (Tab == "RejectionDataApp") ? RejectionDataApp.OrderByDescending(c => c.DERFId).ToPagedList(page ?? 1, 10) : RejectionDataApp.OrderByDescending(c => c.DERFId).ToPagedList(1, 10);


            VM.AllDerf = (Tab == "AllDerf") ? AllDerf.OrderByDescending(c => c.DERFId).ToPagedList(page ?? 1, 10) : AllDerf.OrderByDescending(c => c.DERFId).ToPagedList(1, 10);
            VM.Tab = Tab;

            return View(VM);
        }


        public ActionResult New()
        {
            DERFDTO dto = new DERFDTO();

            SessionDTO session = (SessionDTO)Session["UserInfo"];

            if (session == null)
            { return RedirectToAction("Index", "Login"); }
            //ViewBag.UserName = UserStatics.UserName;
            //ViewBag.Designation = UserStatics.UserDesignation;

            List<DepartmentList> DptLst = new List<DepartmentList>();

            DptLst = derfbll.GetDepartmentList();

            //dto.CreatedUser = UserStatics.UserId;
            //dto.CreatedDate = DateTime.Now;
            //dto.Status = "Created";
            //dto.StatusDate = DateTime.Now;
            dto = derfbll.GetDerfUserDetails(session);
            dto.DepartmentList = DptLst;
            dto.StreamList = derfbll.GetStreamList();
            dto.AppList = derfbll.GetAppList();

            return View(dto);
        }

        //New DERF Creation
        [HttpPost]
        public ActionResult New(DERFDTO model)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            if (session == null)
            { return RedirectToAction("Index", "Login"); }

            if (ModelState.IsValid && TempData.ContainsKey("CustomeFileName") && model.ApprovedUser!= null )
            {



                //StaticLogCommBLL.CreateLog(, "BUSS_INIT", "User has raised this DERF");

                //string FileName = Path.GetFileNameWithoutExtension(model.File.FileName);

                //string Extension = Path.GetExtension(model.File.FileName);

                //FileName = FileName + DateTime.Now.ToString("yyMMddHHmmssfff") + Extension;

                //string FilePath = "~/App_Data/Derf_Format" + FileName;

                //string FileNameWithPath = Path.Combine(Server.MapPath("~/App_Data/Derf_Format"), FileName);

                model.FileName = TempData["CustomeFileName"].ToString();
                TempData.Remove("CustomeFileName");
                MsgCommDTO Msg = new MsgCommDTO();

                derfbll.DERFCreation(model, session, out Msg);
                if (Msg == null || Msg.DerfId == 0)
                {
                    return RedirectToAction("New");
                }
                UserDTO UserDetails = usrbll.GetUserDetails(Msg.UserId);
                UserDTO ToUserDetails = usrbll.GetUserDetails(Msg.ToUserId);
                string POI = derfbll.GetPOI(Msg.DerfId);

                EmailAtDeptApproval(Msg.DerfId.ToString(), UserDetails.UserName, ToUserDetails.Email, POI, Msg.MsgDateTime, Msg.Id);

                //model.File.SaveAs(FileNameWithPath);

                return RedirectToAction("Index");
            }
            else
            {
                //model.StreamList = derfbll.GetStreamList();
                //model.AppList = derfbll.GetAppList();
                //return View(model);
                return RedirectToAction("New");
            }
        }


        [HttpPost]
        public ActionResult FileUpload(HttpPostedFileBase File)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            if (session == null) 
            { return RedirectToAction("Index", "Login"); }


            string FileName = Path.GetFileNameWithoutExtension(File.FileName);

            string Extension = Path.GetExtension(File.FileName);

            FileName = FileName +'_'+ DateTime.Now.ToString("yyMMddHHmmssfff") + Extension;

            string FileNameWithPath = Path.Combine(Server.MapPath("~/App_Data/Derf_Format"), FileName);

            File.SaveAs(FileNameWithPath);

            TempData["CustomeFileName"] = FileName;

            return Json(true, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult FileDelete()
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            if (session == null)
            { return RedirectToAction("Index", "Login"); }

            string FileName;

            if (TempData.ContainsKey("CustomeFileName"))
            {
                FileName = TempData["CustomeFileName"].ToString();
                TempData.Remove("CustomeFileName");
                string FileNameWithPath = Path.Combine(Server.MapPath("~/App_Data/Derf_Format"), FileName);

                FileInfo file = new FileInfo(FileNameWithPath);

                if (file.Exists)
                {
                    file.Delete();
                }
            }




            return Json(true, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public void Downloads(string FileName)
        {
            try
            {
                String filename = FileName;
                String filepath = Server.MapPath("~/App_Data/Derf_Format/" + filename);

                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + Uri.EscapeDataString(filename));
                Response.Flush();

                Response.TransmitFile(filepath);
                Response.End();
                HttpContext.ApplicationInstance.CompleteRequest();
                ViewBag.Message = "";
            }
            catch (Exception ex)
            {
                ViewBag.Message = ex.Message.ToString();
            }

        }



        //Derf Details


        public ActionResult Details(int id = 0)
        {
            DERFDTO dto = new DERFDTO();

            SessionDTO session = (SessionDTO)Session["UserInfo"];

            if (session == null)
            { return RedirectToAction("Index", "Login"); }

            if (id != 0)
            {

                dto = derfbll.GetDERFDetails(id, session);

                if (!(dto.CreatedUser == session.UserId || dto.ApprovedUser == session.UserId || dto.EndorsedUser == session.UserId || dto.DeptName == session.DeptName || session.SysRole != "R_USER"))
                {
                    return RedirectToAction("Index");
                }

                if ((dto.EndorsedUser == null && dto.ApprovedUser == session.UserId && dto.ApprovedDate == null)||
                    (dto.EndorsedUser == session.UserId && dto.EndorsedDate == null)||
                    (dto.EndorsedDate != null && dto.ApprovedUser == session.UserId && dto.ApprovedDate == null)
                    )
                {
                    ViewBag.AppFlg = "Y";
                }
                else
                {
                    ViewBag.AppFlg = "N";
                }


                ViewBag.Role = session.SysRole; //"R_DWH_APP";

            }
            if (dto != null && dto.DERFId != 0)
            {
                return View(dto);
            }
            else
            {
                return RedirectToAction("Index");
            }

        }



        // Get the Assignee List
        [HttpPost]
        public JsonResult AssigneeList(int derfid)
        {

            List<AssigneeDTO> dto = derfbll.GetAssigneeList(derfid);
            var json = JsonConvert.SerializeObject(dto);

            return Json(json, JsonRequestBehavior.AllowGet);
        }


        //Get the Derf Pending Status for all assignee
        [HttpPost]
        public JsonResult DerfPendingList()
        {
            List<DerfPendingStatusDTO> dto = derfbll.GetDerfPendingList();
            var json = JsonConvert.SerializeObject(dto);

            return Json(json, JsonRequestBehavior.AllowGet);
        }

        //Get Assignee list for Derf has been assigned
        [HttpPost]
        public JsonResult DerfAssignTo(int vDerfId)
        {
            //int derfidInt;
            //bool intCheck = int.TryParse(vDerfId, out derfidInt);
            //if (!intCheck)
            //{ derfidInt = 0; }
            //vDerfId = 400001;
            if (vDerfId != 0)
            {
                List<AssignmentDTO> dto = derfbll.GetDerfAssignToList(vDerfId);

                var json = JsonConvert.SerializeObject(dto);
                return Json(json, JsonRequestBehavior.AllowGet);
            }
            else
                return Json(false, JsonRequestBehavior.AllowGet);
        }

        //Assigne a Derf to assingee | Assignment of DERF
        [Authorize(Roles = ("R_DWH_APP"))]
        [HttpPost]
        public JsonResult Assignment(List<AssignmentDTO> model)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];
            bool chk = false;

            //MsgCommDTO MsgComm = new MsgCommDTO();
            //MsgComm.DerfId = model.DerfId;
            //MsgComm.Step = model.Step;
            //MsgComm.Msg = "has denied this DERF for processing.";
            //MsgComm.UserId = session.UserId;
            //MsgComm.UserMsg = model.UserMsg;
            //MsgComm.ToUserId = ToUser;
            
            if(model != null )
            {
                List<MsgCommDTO> MsgCommList = model.Select(c => new MsgCommDTO
                {
                    DerfId = c.DERFId,
                    Step = "DWH_ASSIG",
                    UserId = session.UserId,
                    Msg = "has assigned this DERF to " + usrbll.GetUserDetails(c.AssignTo).UserName + ".",
                    ToUserId = c.AssignTo
                }).ToList();

                chk = derfbll.DerfAssignment(model, session, MsgCommList);
            }
            

            return Json(chk, JsonRequestBehavior.AllowGet);
        }

        //public ActionResult Approval()
        //{
        //    List<DERFDTO> dtolist = new List<DERFDTO>();
        //    ViewBag.Page = "Approval";
        //    ViewBag.Date1 = "CREATION DATE";
        //    ViewBag.Date2 = "APPROVAL DATE";
        //    if (UserStatics.UserId != null)
        //    {

        //        dtolist = derfbll.DERFApprovalList();



        //        return View("Index", dtolist);
        //    }
        //    else
        //        return View("Index",dtolist);


        //}

        [Authorize(Roles = ("R_USER,R_DWH_APP") )]
        [HttpPost]
        public ActionResult BussApproved(DERFDTO model)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];
            if (model.ApprovedUser == session.UserId)
            {
                MsgCommDTO MsgComm = new MsgCommDTO();
                MsgComm.DerfId = model.DERFId;
                MsgComm.Step = "BUSS_APP";
                MsgComm.Msg = "has approved this DERF.";
                MsgComm.UserId = session.UserId;
                MsgComm.UserMsg = model.freetext2;

                MsgCommDTO MsgOut = new MsgCommDTO();
                derfbll.DerfBussApproval(model.DERFId, MsgComm, out MsgOut);
            }
            else if (model.EndorsedUser == session.UserId)
            {
                MsgCommDTO MsgComm = new MsgCommDTO();
                MsgComm.DerfId = model.DERFId;
                MsgComm.Step = "BUSS_FWD";
                MsgComm.Msg = "has Forwarded this DERF.";
                MsgComm.UserId = session.UserId;
                MsgComm.ToUserId = model.ApprovedUser;
                MsgComm.UserMsg = model.freetext2;

                MsgCommDTO MsgOut = new MsgCommDTO();

                derfbll.DerfBussApproval(model.DERFId, MsgComm, out MsgOut);

                if (MsgOut != null || MsgOut.DerfId != 0)
                {
                    UserDTO UserDetails = usrbll.GetUserDetails(MsgOut.UserId);
                    UserDTO ToUserDetails = usrbll.GetUserDetails(MsgOut.ToUserId);
                    string POI = derfbll.GetPOI(MsgOut.DerfId);

                    EmailAtDeptApproval(MsgOut.DerfId.ToString(), UserDetails.UserName, ToUserDetails.Email, POI, MsgOut.MsgDateTime, MsgOut.Id);
                }
                

            }

            
            return RedirectToAction("Index");
        }

        [Authorize(Roles = ("R_USER,R_DWH_APP"))]
        [HttpPost]
        public ActionResult BussRejected(DERFDTO model)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            if (session.UserId == model.ApprovedUser)
            {
                MsgCommDTO MsgComm = new MsgCommDTO();
                MsgComm.DerfId = model.DERFId;
                MsgComm.Step = "BUSS_REJ";
                MsgComm.Msg = "has rejected this DERF.";
                MsgComm.UserId = session.UserId;
                MsgComm.UserMsg = model.freetext2;

                derfbll.DerfBussRejected(model.DERFId, MsgComm);

            }
            else if (session.UserId == model.EndorsedUser)
            {
                MsgCommDTO MsgComm = new MsgCommDTO();
                MsgComm.DerfId = model.DERFId;
                MsgComm.Step = "BUSS_FWD_REJ";
                MsgComm.Msg = "has rejected this DERF.";
                MsgComm.UserId = session.UserId;
                MsgComm.UserMsg = model.freetext2;

                derfbll.DerfBussRejected(model.DERFId, MsgComm);
                
            }


            return RedirectToAction("Index");
        }

        //public ActionResult CDOForwarded(int derfid)
        //{

        //    return Json(false, JsonRequestBehavior.AllowGet);
        //}

        [HttpPost]
        public JsonResult MsgComm(MsgCommDTO model)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];
            
            if (session.UserId != null && model.DerfId != 0)
            {
                bool chk = false;

                if (model.Step == "DWH_REJ")
                {
                    MsgCommDTO MsgComm = new MsgCommDTO();
                    MsgComm.DerfId = model.DerfId;
                    MsgComm.Step = model.Step;
                    MsgComm.Msg = "has rejected this DERF.";
                    MsgComm.UserId = session.UserId;
                    MsgComm.UserMsg = model.UserMsg;
                    chk = derfbll.DerfDwhRejected(session, MsgComm);


                }
                else if (model.Step == "DWH_FWD_CDO")
                {
                    UserDTO user = usrbll.GetCDODetails();
                    if (user != null && user.UserId != null)
                    {
                        MsgCommDTO MsgComm = new MsgCommDTO();
                        MsgComm.DerfId = model.DerfId;
                        MsgComm.Step = model.Step;
                        MsgComm.Msg = "has forwarded this DERF to CDO Office for approval.";
                        MsgComm.UserId = session.UserId;
                        MsgComm.UserMsg = model.UserMsg;
                        MsgComm.ToUserId = user.UserId;
                        int Id;
                        chk = derfbll.CDOForwarded(MsgComm, session, out Id);

                        if (chk && Id != 0) 
                        {
                            UserDTO ToUserDetails = usrbll.GetUserDetails(MsgComm.ToUserId);
                            DERFDTO derf = derfbll.GetDERFDetails(MsgComm.DerfId, session);
                            EmailCDOForward(MsgComm.DerfId.ToString(), ToUserDetails.Email, MsgComm.MsgDateTime, MsgComm.UserMsg, derf.DeptName, Id);

                        }
                    }
                    

                }
                else if (model.Step == "CDO_APP")
                {
                    string ToUser = derfbll.GetDerfLog(model.DerfId).FirstOrDefault(c => c.Step == "DWH_FWD_CDO").UserId;

                    if (ToUser != null)
                    {
                        MsgCommDTO MsgComm = new MsgCommDTO();
                        MsgComm.DerfId = model.DerfId;
                        MsgComm.Step = model.Step;
                        MsgComm.Msg = "has approved this DERF for processing.";
                        MsgComm.UserId = session.UserId;
                        MsgComm.UserMsg = model.UserMsg;
                        MsgComm.ToUserId = ToUser;
                        chk = derfbll.CDOApproved(MsgComm, session);
                    }
                    


                }
                else if (model.Step == "CDO_REJ")
                {
                    string ToUser = derfbll.GetDerfLog(model.DerfId).FirstOrDefault(c => c.Step == "DWH_FWD_CDO").UserId;
                    if (ToUser != null)
                    {
                        MsgCommDTO MsgComm = new MsgCommDTO();
                        MsgComm.DerfId = model.DerfId;
                        MsgComm.Step = model.Step;
                        MsgComm.Msg = "has denied this DERF for processing.";
                        MsgComm.UserId = session.UserId;
                        MsgComm.UserMsg = model.UserMsg;
                        MsgComm.ToUserId = ToUser;
                        chk = derfbll.CDORejected(MsgComm, session);
                    }
                    

                }
                else if (model.Step == "DWH_CLRF")
                {
                    //UserDTO dto = new UserDTO();

                    //dto = usrbll.GetUserDetails();

                    DERFDTO derf = new DERFDTO();

                    derf = derfbll.GetDERFDetails(model.DerfId, session);

                    MsgCommDTO MsgComm = new MsgCommDTO();

                    StaticLogCommBLL.CreateLog(model.DerfId, model.Step, session.UserId,out MsgComm, "has requested clarification.", model.UserMsg, 0, derf.CreatedUser);

                    UserDTO ToUserDetails = usrbll.GetUserDetails(MsgComm.ToUserId);

                    if (session.SysRole == "R_DWH_APP" && MsgComm.Id !=0)
                    {
                        EmailAppClarification(MsgComm.DerfId.ToString(), ToUserDetails.Email, MsgComm.MsgDateTime, MsgComm.Id);
                        chk = true;
 
                    }
                    if (session.SysRole == "R_DWH_USER" && MsgComm.Id != 0)
                    {
                        DateTime RevertDate = derfbll.RevertDate(MsgComm.DerfId, MsgComm.UserId, MsgComm.MsgDateTime);
                        EmailClarification(MsgComm.DerfId.ToString(), ToUserDetails.Email, MsgComm.MsgDateTime, RevertDate, MsgComm.Id);
                        chk = true;
                    }


                    
                }


                return Json(chk, JsonRequestBehavior.AllowGet);
            }
            return Json(false, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult DerfLog(int vDerfId)
        {
            //int derfidInt;
            //bool intCheck = int.TryParse(DerfId, out derfidInt);
            //if (!intCheck)
            //{ derfidInt = 0; }

            if (vDerfId != 0)
            {

                SessionDTO session = (SessionDTO)Session["UserInfo"];

                string userId = derfbll.GetDERFDetails(vDerfId, session).CreatedUser;

                bool chk = (userId == session.UserId ? true : false);

                List<MsgCommDTO> dto = derfbll.GetDerfLog(vDerfId);

                var json = JsonConvert.SerializeObject(new { chk, dto });
                return Json(json, JsonRequestBehavior.AllowGet);
            }
            return Json(false, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult DeptResp(int Id, string Msg)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];
            MsgCommDTO dto = derfbll.DeptResp(Id, session);
            if (dto != null && dto.InitId != 0)
            {
                StaticLogCommBLL.CreateLog(dto.DerfId, "DEPT_RESP", session.UserId, "has provided clarification", Msg, dto.InitId, dto.ToUserId);
            }
            var data = JsonConvert.SerializeObject(new { Id, Msg });
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult GetBussApprover(string ApproverId)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            UserDTO dto = usrbll.GetBussApprover(ApproverId, session);
            if (dto.UserId != null)
            {
                var json = JsonConvert.SerializeObject(dto);
                return Json(json, JsonRequestBehavior.AllowGet);
            }
            return Json(false, JsonRequestBehavior.AllowGet);

        }

        [HttpPost]
        public JsonResult GetBussForwarding(string ForwardingId)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            UserDTO dto = usrbll.GetBussForwarding(ForwardingId, session);
            if (dto.UserId != null)
            {
                var json = JsonConvert.SerializeObject(dto);
                return Json(json, JsonRequestBehavior.AllowGet);
            }
            return Json(false, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult DataSentDetails(AssigneeDsDTO dto)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];
            bool chk = false;
            if (ModelState.IsValid && TempData.ContainsKey("CustomeDataFileName"))
            {

                dto.DataFileName = TempData["CustomeDataFileName"].ToString();
                TempData.Remove("CustomeDataFileName");
                string ToUser = derfbll.GetDERFDetails(dto.DerfId, session).CreatedUser;
                if(ToUser != null)
                {
                    MsgCommDTO MsgComm = new MsgCommDTO();
                    MsgComm.DerfId = dto.DerfId;
                    MsgComm.Step = "DWH_DS";
                    MsgComm.Msg = "has send data file.";
                    MsgComm.UserId = session.UserId;
                    MsgComm.UserMsg = dto.UserMsg;
                    MsgComm.ToUserId = ToUser;

                    MsgCommDTO RMsgComm = new MsgCommDTO();

                    chk = derfbll.DataSentDetails(dto, session, MsgComm, out RMsgComm);

                    if (chk && RMsgComm.Id != 0)
                    {
                        DateTime DataValidationDate = derfbll.RevertDate(RMsgComm.DerfId, RMsgComm.UserId, RMsgComm.MsgDateTime);
                        UserDTO ToUserDetails = usrbll.GetUserDetails(RMsgComm.ToUserId);
                        EmailDataDelivery(RMsgComm.DerfId.ToString(), ToUserDetails.Email, RMsgComm.MsgDateTime, DataValidationDate, dto.DataType, RMsgComm.Id);
                    }
                }
                

                //if (chk)
                //{
                    
                //    MsgCommDTO MsgComm = new MsgCommDTO();
                //    StaticLogCommBLL.CreateLog(dto.DerfId, "DWH_DS", session.UserId, out MsgComm, "has send data file.", dto.UserMsg,0,ToUser);

                //    DateTime DataValidationDate = derfbll.RevertDate(MsgComm.DerfId, MsgComm.UserId, MsgComm.MsgDateTime);

                //    UserDTO ToUserDetails = usrbll.GetUserDetails(MsgComm.ToUserId);
                //    EmailDataDelivery(MsgComm.DerfId.ToString(), ToUserDetails.Email, MsgComm.MsgDateTime, DataValidationDate, dto.DataType, MsgComm.Id);
                //}
            }
            return Json(chk, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult DataFileUpload(HttpPostedFileBase File, int DerfId)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            if (session == null)
            { return RedirectToAction("Index", "Login"); }


            string FileName = Path.GetFileNameWithoutExtension(File.FileName);

            string Extension = Path.GetExtension(File.FileName);

            FileName = FileName + '_' + DerfId.ToString()+'_'+ DateTime.Now.ToString("HHmmssfff") + Extension;

            string FileNameWithPath = Path.Combine(Server.MapPath("~/App_Data/DataFiles"), FileName);

            FileInfo fileInfoDetails = new FileInfo(FileNameWithPath);
            

            if(!fileInfoDetails.Exists)
            {
                File.SaveAs(FileNameWithPath);
                
            }

            if (TempData.ContainsKey("CustomeDataFileName"))
            {
                TempData.Remove("CustomeDataFileName");
            }

            TempData["CustomeDataFileName"] = FileName;

            return Json(true, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult DataFileDelete()
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            if (session == null)
            { return RedirectToAction("Index", "Login"); }

            string FileName;

            if (TempData.ContainsKey("CustomeDataFileName"))
            {
                FileName = TempData["CustomeDataFileName"].ToString();
                TempData.Remove("CustomeDataFileName");
                string FileNameWithPath = Path.Combine(Server.MapPath("~/App_Data/DataFiles"), FileName);

                FileInfo file = new FileInfo(FileNameWithPath);

                if (file.Exists)
                {
                    file.Delete();
                }
            }




            return Json(true, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public void DataFileDown(string FileName)
        {
            try
            {
                String filename = FileName;
                String filepath = Server.MapPath("~/App_Data/DataFiles/" + filename);

                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + Uri.EscapeDataString(filename));
                Response.Flush();

                Response.TransmitFile(filepath);
                Response.End();
                // HttpContext.ApplicationInstance.CompleteRequest();
                ViewBag.Message = "";
            }
            catch (Exception ex)
            {
                ViewBag.Message = ex.Message.ToString();
            }

        }

        public ActionResult DataSentList(int vDerfId)
        {
            var response = false;
            var creator = false;
            string user = null;
            SessionDTO session = (SessionDTO)Session["UserInfo"];
            if (session.UserId == null)
            { return RedirectToAction("Index", "Login"); }

            List<AssigneeDsDTO> dto = new List<AssigneeDsDTO>();
            dto = derfbll.DataSentList(vDerfId).OrderByDescending(c => c.SendDate).ToList();
            if (dto.Count() != 0)
            {
                user = dto.Max(c => c.freetext).ToString();
                response = true;
            }

            if (session.UserId == user)
            {
                creator = true;
            }



            var RespData = JsonConvert.SerializeObject(new { response, creator, Resptext = dto });
            return Json(RespData, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DataFileApproved(int Id, int DerfId)
        {
            bool chk = false;

            SessionDTO session = (SessionDTO)Session["UserInfo"];
            if (session == null)
            { return RedirectToAction("Index", "Login"); }

            if (Id != 0 && DerfId != 0)
            {
                MsgCommDTO MsgComm = new MsgCommDTO();
                MsgComm.DerfId = DerfId;
                MsgComm.Step = "BUSS_DS_ACPT";
                MsgComm.Msg = "has approved data file.";
                MsgComm.UserId = session.UserId;



                chk = derfbll.DataFileApproved(Id, MsgComm);
            }
            

            return Json(chk, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult DataFileReject(DataFileRejectDTO dto)
        {
            bool chk;
            SessionDTO session = (SessionDTO)Session["UserInfo"];
            if (session == null)
            { return RedirectToAction("Index", "Login"); }


            if (dto.uplFile == null)
            {
                chk = false;
                return Json(chk, JsonRequestBehavior.AllowGet);
            }

            string FileName = Path.GetFileNameWithoutExtension(dto.uplFile.FileName);

            dto.ValidationFileName = FileName;

            string Extension = Path.GetExtension(dto.uplFile.FileName);

            FileName = FileName + '_' + DateTime.Now.ToString("yyMMddHHmmssfff") + Extension;

            //string FilePath = "~/App_Data/Derf_Format" + FileName;

            string FileNameWithPath = Path.Combine(Server.MapPath("~/App_Data/ValidationFiles"), FileName);

            dto.ValidationNewFileName = FileName;

            dto.uplFile.SaveAs(FileNameWithPath);

            MsgCommDTO MsgComm = new MsgCommDTO();
            MsgComm.DerfId = dto.DerfId;
            MsgComm.Step = "BUSS_DS_REJ";
            MsgComm.Msg = "has rejected data file.";
            MsgComm.UserId = session.UserId;

            chk = derfbll.DataFileReject(dto, MsgComm);


            return Json(chk, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public void DataFileRejectDown(string FileName)
        {
            try
            {
                String filename = FileName;
                String filepath = Server.MapPath("~/App_Data/ValidationFiles/" + filename);

                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + Uri.EscapeDataString(filename));
                Response.Flush();

                Response.TransmitFile(filepath);
                Response.End();
                // HttpContext.ApplicationInstance.CompleteRequest();
                ViewBag.Message = "";
            }
            catch (Exception ex)
            {
                ViewBag.Message = ex.Message.ToString();
            }

        }

        [HttpPost]
        public ActionResult DataFileDetails(int vDerfId)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            List<AssigneeDsDTO> dto = new List<AssigneeDsDTO>();

            dto = derfbll.DataFileDetails(vDerfId, session.SysRole);


            var json = JsonConvert.SerializeObject(dto);

            return Json(json, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult DataDispAppRej(DataDispAppRejDTO model)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            string step = null;
            bool response = false;
            
            if(!string.IsNullOrEmpty(model.step))
            {
                MsgCommDTO MsgComm = new MsgCommDTO();
                MsgComm.DerfId = model.DerfId;
                MsgComm.Step = model.step == "Approve" ? "DISC_REQ_APP" : "DISC_REQ_REJ";
                MsgComm.Msg = model.step == "Approve" ? "has approved discrepancy request." : "has rejected discrepancy request.";
                MsgComm.UserId = session.UserId;
                MsgComm.UserMsg = model.Comment;

                response = derfbll.DataDispAppRej(model, session, MsgComm);
            }
            

            if (response)
            {
                step = model.step;
            }
            
            var json = JsonConvert.SerializeObject(new { response, step });

            return Json(json, JsonRequestBehavior.AllowGet);


        }

        [HttpPost]
        public ActionResult DataDiscComm(int Id)
        {
            string comm = derfbll.DataDiscComm(Id);

            var json = JsonConvert.SerializeObject(comm);

            return Json(json, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult FreshFileDetails(int Id)
        {
            SessionDTO session = (SessionDTO)Session["UserInfo"];
            List<FreshFileListDTO> dto = derfbll.FreshFileList(Id, session);
            var data = JsonConvert.SerializeObject(dto);
            return Json(data, JsonRequestBehavior.AllowGet);
        }


        

        //[HttpPost]
        //public ActionResult test()
        //{
        //    //SessionDTO session = (SessionDTO)Session["UserInfo"];
        //    EmailDTO dto = new EmailDTO();
        //    dto.Subject = "BANK INTERNAL | 400001 | Clarification Requested";
        //    dto.To = "Prashant.Ayaudh@bankofbaroda.co.in";
        //    using (StreamReader reader = new StreamReader(Server.MapPath("~/App_Data/MailTemplates/DataDelivery.html")))
        //    {
        //        dto.Body = reader.ReadToEnd();

        //        dto.ImagePath1 = Server.MapPath("~/dist/images/boblogoformail.png");
        //        dto.ImagePath2 = Server.MapPath("~/dist/images/derfportallogoformail.png");

        //        //LinkedResource img = new LinkedResource(boblogopath, MediaTypeNames.Image.Jpeg);

        //        //img.ContentId = "BankofBarodaLogo";

        //        //AlternateView AV = AlternateView.CreateAlternateViewFromString(dto.Body, null, MediaTypeNames.Text.Html);
        //        //AV.LinkedResources.Add(img);
        //        //dto.Body = (string)AV;
        //        //LinkedResource img = new LinkedResource(boblogopath,MediaTypeName)
        //    }

        //    EmailSendStaticBLL.EmailSend(dto);
        //    return Json(true, JsonRequestBehavior.AllowGet);
        //}


        

        

        

        


        //EMail 

        private void EmailAtDeptApproval(string DerfId, string UserName, string ToUserEmail, string POI, DateTime? DerfRaised, int Id = 0)
        {
            EmailDTO dto = new EmailDTO();
            
            dto.Subject = "BANK INTERNAL | " + DerfId + " | Approval Request";
            dto.To = ToUserEmail;

            SessionDTO session = (SessionDTO)Session["UserInfo"];
            dto.DeptMailId = derfbll.GetDERFDetails(Convert.ToInt32(DerfId), session).DeptEmail;

            using (StreamReader reader = new StreamReader(Server.MapPath("~/App_Data/MailTemplates/DeptApprovalTemplate.html")))
            {
                dto.Body = reader.ReadToEnd();

                dto.ImagePath1 = Server.MapPath("~/dist/images/boblogoformail.png");
                dto.ImagePath2 = Server.MapPath("~/dist/images/derfportallogoformail.png");


            }



            dto.Body = dto.Body.Replace("{{DerfNo}}", DerfId);
            dto.Body = dto.Body.Replace("{{POI}}", POI);
            dto.Body = dto.Body.Replace("{{UserName}}", UserName);
            dto.Body = dto.Body.Replace("{{DerfRaised}}", DerfRaised.ToString());


            EmailSendStaticBLL.EmailSend(dto);
            EmailSendStaticBLL.EmailStatusChange(Id);
        }

        private void EmailAppClarification(string DerfId, string ToUserEmail, DateTime? ClarificationRaised, int Id = 0)
        {
            EmailDTO dto = new EmailDTO();
            dto.Subject = "BANK INTERNAL | " + DerfId + " | Clarification Request";
            dto.To = ToUserEmail;

            SessionDTO session = (SessionDTO)Session["UserInfo"];
            dto.DeptMailId = derfbll.GetDERFDetails(Convert.ToInt32(DerfId), session).DeptEmail;

            using (StreamReader reader = new StreamReader(Server.MapPath("~/App_Data/MailTemplates/AppClarificatinTemplate.html")))
            {
                dto.Body = reader.ReadToEnd();

                dto.ImagePath1 = Server.MapPath("~/dist/images/boblogoformail.png");
                dto.ImagePath2 = Server.MapPath("~/dist/images/derfportallogoformail.png");


            }



            dto.Body = dto.Body.Replace("{{DerfNo}}", DerfId);
            dto.Body = dto.Body.Replace("{{ClarificationRaised}}", ClarificationRaised.ToString());


            EmailSendStaticBLL.EmailSend(dto);
            EmailSendStaticBLL.EmailStatusChange(Id);
        }

        private void EmailClarification(string DerfId, string ToUserEmail, DateTime? ClarificationRaised, DateTime? ClarificationRevert, int Id = 0)
        {
            EmailDTO dto = new EmailDTO();
            dto.Subject = "BANK INTERNAL | " + DerfId + " | Clarification Request";
            dto.To = ToUserEmail;

            SessionDTO session = (SessionDTO)Session["UserInfo"];
            dto.DeptMailId = derfbll.GetDERFDetails(Convert.ToInt32(DerfId), session).DeptEmail;

            using (StreamReader reader = new StreamReader(Server.MapPath("~/App_Data/MailTemplates/ClarificatinTemplate.html")))
            {
                dto.Body = reader.ReadToEnd();

                dto.ImagePath1 = Server.MapPath("~/dist/images/boblogoformail.png");
                dto.ImagePath2 = Server.MapPath("~/dist/images/derfportallogoformail.png");


            }



            dto.Body = dto.Body.Replace("{{DerfNo}}", DerfId);
            dto.Body = dto.Body.Replace("{{ClarificationRaised}}", ClarificationRaised.ToString());
            dto.Body = dto.Body.Replace("{{ClarificationRevert}}", ClarificationRevert.ToString());

            EmailSendStaticBLL.EmailSend(dto);
            EmailSendStaticBLL.EmailStatusChange(Id);
        }

        private void EmailDataDelivery(string DerfId, string ToUserEmail, DateTime? DataDeliveryDate, DateTime? DataValidationDate, string DataType, int Id = 0)
        {
            EmailDTO dto = new EmailDTO();

            SessionDTO session = (SessionDTO)Session["UserInfo"];
            dto.DeptMailId = derfbll.GetDERFDetails(Convert.ToInt32(DerfId), session).DeptEmail;

            string TypeE = "";
            string TypeH = "";
            if (DataType == "Sample")
            {
                TypeE = "Sample Data";
                TypeH = "????? ????";
            }
            if (DataType == "Fresh")
            {
                TypeE = "Final Data";
                TypeH = "????? ????";
            }
            if (DataType == "Revised")
            {
                TypeE = "Revised Data";
                TypeH = "??????? ????";
            }

            dto.Subject = "BANK INTERNAL | " + DerfId + " | " + TypeE + " Received";
            dto.To = ToUserEmail;

            using (StreamReader reader = new StreamReader(Server.MapPath("~/App_Data/MailTemplates/DataDelivery.html")))
            {
                dto.Body = reader.ReadToEnd();

                dto.ImagePath1 = Server.MapPath("~/dist/images/boblogoformail.png");
                dto.ImagePath2 = Server.MapPath("~/dist/images/derfportallogoformail.png");


            }

            
            


            dto.Body = dto.Body.Replace("{{TypeE}}", TypeE);
            dto.Body = dto.Body.Replace("{{TypeH}}", TypeH);
            dto.Body = dto.Body.Replace("{{DerfNo}}", DerfId);
            dto.Body = dto.Body.Replace("{{DataDeliveryDate}}", DataDeliveryDate.ToString());
            dto.Body = dto.Body.Replace("{{DataValidationDate}}", DataValidationDate.ToString());

            EmailSendStaticBLL.EmailSend(dto);
            EmailSendStaticBLL.EmailStatusChange(Id);
        }

        private void EmailCDOForward(string DerfId, string ToUserEmail, DateTime? ClarificationRaised, string ForwardingCmt, string DeptName, int Id = 0)
        {
            EmailDTO dto = new EmailDTO();
            dto.Subject = "BANK INTERNAL | " + DerfId + " | Approval Request";
            dto.To = ToUserEmail;

            using (StreamReader reader = new StreamReader(Server.MapPath("~/App_Data/MailTemplates/CDOForwardTemplate.html")))
            {
                dto.Body = reader.ReadToEnd();

                dto.ImagePath1 = Server.MapPath("~/dist/images/boblogoformail.png");
                dto.ImagePath2 = Server.MapPath("~/dist/images/derfportallogoformail.png");


            }


            dto.Body = dto.Body.Replace("{{DerfNo}}", DerfId);
            dto.Body = dto.Body.Replace("{{ForwardingCmt}}", ForwardingCmt);
            dto.Body = dto.Body.Replace("{{DeptName}}", DeptName);
            dto.Body = dto.Body.Replace("{{ClarificationRaised}}", ClarificationRaised.ToString());
            


            EmailSendStaticBLL.EmailSend(dto);
            EmailSendStaticBLL.EmailStatusChange(Id);
        }


        public ActionResult Search()
        {
            return View();
        }

        [HttpPost]
        public JsonResult SearchTotal(string SearchString)
        {
            if (string.IsNullOrEmpty(SearchString))
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
            SessionDTO session = (SessionDTO)Session["UserInfo"];

            int TotalCnt = derfbll.GetSearchCount(SearchString, session);
            var data = JsonConvert.SerializeObject(TotalCnt);
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult SearchRecords(string SearchString, int Start = 0, int NoOfRecords = 20)
        {
            if (string.IsNullOrEmpty(SearchString))
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
            SessionDTO session = (SessionDTO)Session["UserInfo"];
            List<DERFDTO> derfList = derfbll.GetSearchRecords(SearchString, session,Start, NoOfRecords).OrderBy(c => c.DERFId).ToList();
            var data = JsonConvert.SerializeObject(derfList);
            return Json(data, JsonRequestBehavior.AllowGet);
        }


    }
}










@model DTO.DERFDTO
@{
    
    if (Session["UserInfo"] == null)
    {
        Response.Redirect("~/Login/Index");
    }
    ViewBag.MainLink = "DERF";
    ViewBag.Title = "New DERF";
    Layout = "~/Views/Shared/_homeLayout.cshtml";
}

<!-- content start from here -->
<!-- BEGIN: Wizard Layout -->
<div class="intro-y box pt-4 pb-8 mt-5">
    @*<div class="relative before:hidden before:lg:block before:absolute before:w-[69%] before:h-[3px] before:top-0 before:bottom-0 before:mt-4 before:bg-slate-100 before:dark:bg-darkmode-400 flex flex-col lg:flex-row justify-center px-5 sm:px-20">
        <div class="intro-x lg:text-center flex items-center lg:block flex-1 z-10">
            <button class="w-10 h-10 rounded-full btn btn-primary">1</button>
            <div class="lg:w-32 font-medium text-base lg:mt-3 ml-3 lg:mx-auto">
                DERF Request
                Initiate
            </div>
        </div>
        <div class="intro-x lg:text-center flex items-center mt-5 lg:mt-0 lg:block flex-1 z-10">
            <button class="w-10 h-10 rounded-full btn text-slate-500 bg-slate-100 dark:bg-darkmode-400 dark:border-darkmode-400">
                2
            </button>
            <div class="lg:w-32 text-base lg:mt-3 ml-3 lg:mx-auto text-slate-600 dark:text-slate-400">
                DERF Request
                Approved
            </div>
        </div>
        <div class="intro-x lg:text-center flex items-center mt-5 lg:mt-0 lg:block flex-1 z-10">
            <button class="w-10 h-10 rounded-full btn text-slate-500 bg-slate-100 dark:bg-darkmode-400 dark:border-darkmode-400">
                3
            </button>
            <div class="lg:w-32 text-base lg:mt-3 ml-3 lg:mx-auto text-slate-600 dark:text-slate-400">
                DERF Assigned
            </div>
        </div>
        <div class="intro-x lg:text-center flex items-center mt-5 lg:mt-0 lg:block flex-1 z-10">
            <button class="w-10 h-10 rounded-full btn text-slate-500 bg-slate-100 dark:bg-darkmode-400 dark:border-darkmode-400">
                4
            </button>
            <div class="lg:w-32 text-base lg:mt-3 ml-3 lg:mx-auto text-slate-600 dark:text-slate-400">
                Work in Progress

            </div>
        </div>
        <div class="intro-x lg:text-center flex items-center mt-5 lg:mt-0 lg:block flex-1 z-10">
            <button class="w-10 h-10 rounded-full btn text-slate-500 bg-slate-100 dark:bg-darkmode-400 dark:border-darkmode-400">
                5
            </button>
            <div class="lg:w-32 text-base lg:mt-3 ml-3 lg:mx-auto text-slate-600 dark:text-slate-400">
                Finalize your
                Request
            </div>
        </div>
    </div>*@

@using (@Html.BeginForm("New", "DERF", FormMethod.Post, new { @class = "form_validation", id = "formId", enctype = "multipart/form-data" }))
{
    <div class="intro-x errorTxt alert alert-pending-soft hidden"></div>
    <div class="intro-y px-5 sm:px-20 mt-10 border-t border-slate-200/60 dark:border-darkmode-400">
        @*<div class="errorTxt alert alert-pending-soft hidden"></div>*@
        <div class="intro-y grid grid-cols-2 2xl:grid-cols-3 gap-y-5 my-5 gap-x-4">
            <div class="grid grid-cols-3 items-center">
                <label class="form-label mr-2">* Department Name:</label>
                <div class="form-control col-span-2">
                    <select data-placeholder="Search here if displayed is not correct"
                            class="tom-select w-full" name="DeptName">
                        @if (@Model.DeptName != null)
                        {
                            <option value="@Model.DeptName" selected> @Model.DeptName</option>
                        }
                        else
                        {
                            <option value="" selected disabled> Please Select Department Name</option>
                            foreach (var item in @Model.DepartmentList)
                            {
                                <option value="@item.DepartmentName"> @item.DepartmentName</option>
                            }
                        }
                        @*<optgroup label="Domestic">

                                <option value="ALM Cell Risk Management">ALM Cell Risk Management</option>
                                <option value="Operations & Services">Operations & Services</option>
                                <option value="Retail Liabilitiesr">Retail Liabilitiesr</option>
                                <option value="Large Corporate">Large Corporate</option>
                                <option value="International IT">International IT</option>
                            </optgroup>
                            <optgroup label="International">
                                <option value="Botswana">Botswana</option>
                                <option value="7">UAE</option>
                                <option value="8">UK</option>
                                <option value="9">UK GW</option>
                                <option value="10">Australia</option>
                            </optgroup>*@
                    </select>
                </div>
            </div>
            <!-- <div class="grid grid-cols-3 items-center">
            <label for="office-location" class="form-label mr-2">Office Location:</label>
              <input type="text" class="form-control col-span-2" placeholder="Where Your office is located" aria-label="default input inline 2" id="office-location">
            </div> -->
            <div class="grid grid-cols-3 items-center">
                <label for="Email" class="form-label mr-2">* Department Email:</label>
                <input type="text" id="Email" class="form-control col-span-2" placeholder="Enter Dept. E-Mail" aria-label="default input inline 2" name="DeptEmail">
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Contact-Person-Name" class="form-label mr-2">* Contact Person Name:</label>
                <input type="text" id="Contact-Person-Name" class="form-control col-span-2" placeholder="Name of SPOC" aria-label="default input inline 2" name="ContactName">
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Contact-Person-Mob" class="form-label mr-2">* Contact Person Mobile No:</label>
                <input type="text" id="Contact-Person-Mob" class="form-control col-span-2" placeholder="SPOC Mobile No" aria-label="default input inline 2" name="ContactNo">
            </div>
            <div class="grid grid-cols-3 items-center">
                <label for="Contact-Person-Alt-Mob" class="form-label mr-2">Alternate contact No:</label>
                <input type="text" id="Contact-Person-Alt-Mob" class="form-control col-span-2" placeholder="SPOC Alternate No" aria-label="default input inline 2" name="AltContactNo">
            </div>

            <div class="grid grid-cols-3 items-center">
                <label class="mr-6">* Admin Office Type:</label>
                <div class="col-span-2 flex flex-row">
                    <div class="form-check mr-2"> <input id="BCC" class="form-check-input" type="checkbox" value="BCC" name="OfficeType"> <label class="form-check-label" for="BCC">BCC</label> </div>
                    <div class="form-check mr-2"> <input id="ZO" class="form-check-input" type="checkbox" value="ZO" name="OfficeType"> <label class="form-check-label" for="ZO">ZO</label> </div>
                    <div class="form-check mr-2"> <input id="RO" class="form-check-input" type="checkbox" value="RO" name="OfficeType"> <label class="form-check-label" for="RO">RO</label> </div>
                    <div class="form-check mr-2"> <input id="OVERSEAS" class="form-check-input" type="checkbox" value="OVERSEAS" name="OfficeType"> <label class="form-check-label" for="OVERSEAS">OVERSEAS</label> </div>
                </div>


            </div>


        </div>

        <div class="flex flex-col space-y-4 pt-8 pb-4">

            <hr class="border-t border-gray-300">

        </div>
        <div class="flex flex-col space-y-4 pt-4 pb-4">
            <label for="description" class="form-label">
                * Details of Information required with Business Definition
            </label>
            <textarea id="description" name="DERFDetails" rows="7" class="form-control resize-none" placeholder="
                Please explain your requirement as detailed as possible along with business defintion as applicable in Bank of Baroda."></textarea>
        </div>


        <div class="grid 2xl:grid-cols-3 grid-cols-2 my-5 md:gap-y-4 gap-x-4 gap-y-5">

            <div class="grid grid-cols-3 items-center">
                <label class="mr-2">* Data Pertaining to:</label>
                <div class="col-span-2 items-center flex flex-row">
                    <div class="form-check mr-2">
                        <input id="Domestic" class="form-check-input" type="radio" value="Domestic" name="DataPertain">
                        <label class="form-check-label" for="Domestic">Domestic</label>
                    </div>
                    <div class="form-check mr-2 sm:mt-0">
                        <input id="Overseas" class="form-check-input" type="radio" value="Overseas" name="DataPertain">
                        <label class="form-check-label" for="Overseas">Overseas</label>
                    </div>
                    <div class="form-check mr-2 sm:mt-0">
                        <input id="DataPertainBoth" class="form-check-input" type="radio" value="Domestic & Overseas" name="DataPertain">
                        <label class="form-check-label" for="DataPertainBoth">Both</label>
                    </div>
                </div>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label class="mr-2">* Type of Data:</label>
                <div class="col-span-2 items-center flex flex-row">
                    <div class="form-check mr-2"> <input id="Financial" class="form-check-input" type="radio" value="Financial" name="DataType"> <label class="form-check-label" for="Financial">Financial</label> </div>
                    <div class="form-check mr-2 sm:mt-0"> <input id="Non-Financial" class="form-check-input" type="radio" value="Non-Financial" name="DataType"> <label class="form-check-label" for="Non-Financial">Non-Financial</label> </div>
                    <div class="form-check mr-2 sm:mt-0"> <input id="DataTypeBoth" class="form-check-input" type="radio" value="Financial & Non-Financial" name="DataType"> <label class="form-check-label" for="DataTypeBoth">Both</label> </div>
                </div>
            </div>
            <div class="grid grid-cols-3 items-center">
                <label class="mr-2">* Purpose of Use:</label>
                <div class="col-span-2 items-center flex flex-row">
                    <div class="form-check mr-2"> <input id="Banks-Internal" class="form-check-input" type="radio" value="Bank's Internal" name="Purpose"> <label class="form-check-label" for="Banks-Internal">Bank's Internal</label> </div>
                    <div class="form-check mr-2 sm:mt-0"> <input id="External" class="form-check-input" type="radio" value="External" name="Purpose"> <label class="form-check-label" for="External">External</label> </div>
                </div>
            </div>
        </div>

        <div class="grid 2xl:grid-cols-3 grid-cols-2 my-5 md:gap-y-4 gap-x-4 gap-y-5">
            <div class="grid grid-cols-3 items-center w-auto">
                <label class="form-label ">* Whether Data Contains PII Element:</label>
                <div class="col-span-2">
                    <select id="PIIFlg" class="form-select mt-2 " aria-label="Default select example" name="PIIFlg">
                        <option value="0" selected disabled> Data contains Personally Identifiable Information?</option>
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                    </select>
                    <a href="#" style=" display: inline; font-size: 10px; color: darkgrey;" id="PIIElemetnImage">Click here for the list of PII elements</a>

                </div>
            </div>
            <div class="grid grid-cols-3 items-center hidden" id="Banks-Internal-sub">
                <label class="form-label">If Bank's Internal:</label>
                <div class="form-control col-span-2">
                    <select data-placeholder="Select"
                            class="tom-select w-full" name="PurposeSubCat1">
                        <option value="0" selected disabled>Consumption For</option>
                        <option value="RBS">RBS</option>
                        <option value="Business">Business</option>
                        <option value="Compliance">Compliance</option>
                        <option value="Monitoring">Monitoring</option>
                    </select>
                </div>
            </div>
            <div class="grid grid-cols-3 items-center hidden" id="External-sub">
                <label class="form-label">If External:</label>
                <div class="form-control col-span-2">
                    <select data-placeholder="Select"
                            class="tom-select w-full" name="PurposeSubCat2">
                        <option value="0" selected disabled>Reporting To</option>

                        <option value='Govt Of India'>Govt Of India</option>
                        <option value="Parliament">Parliament</option>
                        <option value="RBI">RBI</option>
                        <option value="CBI">CBI</option>
                        <option value='Tax Authority'>Tax Authority</option>
                        <option value='State Govt.'>State Govt.</option>
                        <option value='Local Police'>Local Police</option>
                        <option value="RTI">RTI</option>
                        <option value="SLBC">SLBC</option>
                        <option value="IBA">IBA</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
            </div>

            <div class="grid grid-cols-3 items-center " id="PurposeDetail">
                <label class="form-label">* Purpose In Details:</label>
                <div class="col-span-2 flex flex-row">
                    <input id="App-Name" type="text" class="form-control" placeholder="Purpose In Details" name="PurposeDetail">
                </div>
            </div>

        </div>

        <input id="btnchk" class="hidden" type="radio" value="0" name="btnchk">
        <div class="grid 2xl:grid-cols-3 grid-cols-2 my-5 md:gap-y-4 gap-x-4 gap-y-5">
            <div class="grid grid-cols-2 gap-x-3 items-center">
                <button class="btn btn-rounded btn-secondary-soft h-12" id="btn1" name="btn1">Development of New Report</button>
                <button class="btn btn-rounded btn-secondary-soft h-12 w-auto" id="btn2" name="btn2">Customization of Existing Report</button>
            </div>

        </div>

        <div class="grid 2xl:grid-cols-3 grid-cols-2 my-5 gap-x-4 gap-y-5 hidden" id="newDev">
            <div class="grid grid-cols-3 items-center mt-3">
                <label class="form-label">Development Type:</label>
                <div class="col-span-2 flex flex-row">
                    <div class="form-check mr-2">
                        <input id="Adhoc" class="form-check-input" type="radio"
                               name="DevType" value="Adhoc">
                        <label class="form-check-label" for="Adhoc">Adhoc</label>
                    </div>
                    <div class="form-check mr-2 sm:mt-0">
                        <input id="Permanent" class="form-check-input"
                               type="radio" name="DevType" value="Permanent">
                        <label class="form-check-label" for="Permanent">Permanent</label>
                    </div>
                    <div class="form-check mr-2 sm:mt-0">
                        <input id="Temporary" class="form-check-input"
                               type="radio" name="DevType" value="Temporary">
                        <label class="form-check-label" for="Temporary">Temporary</label>
                    </div>

                </div>
            </div>
            <div class="grid grid-cols-3 items-center mt-3 hidden" id="Temporary-month">
                <label class="form-label">If Temporary:</label>
                <div class="col-span-2 flex flex-row">
                    <input type="number" class="form-control" placeholder="Period in Months" name="PeriodInMonth">
                </div>
            </div>

            <div class="grid grid-cols-3 items-center mt-3">
                <label class="form-label">Extraction Type:</label>
                <div class="col-span-2 flex flex-row form-control">
                    <select data-placeholder="Search type" class="tom-select w-full" name="ExtractType">
                        <option value="0" selected disabled> Select type</option>
                        <option value='Bank as a whole'>Bank as a whole</option>
                        <option value='Zone-wise'>Zone-wise </option>
                        <option value='Region-wise'>Region-wise</option>
                        <option value='Branch-wise'>Branch-wise</option>
                        <option value='State-wise'>State-wise </option>
                        <option value='District-wise'>District-wise</option>
                        <option value='City-wise'>City-wise </option>
                        <option value='Territory'>Territory </option>

                    </select>
                </div>
            </div>
            <div class="grid grid-cols-3 items-center mt-3 hidden" id="Pub-freq">
                <label class="form-label">Publication Frequency:</label>
                <div class="col-span-2 flex flex-row form-control">
                    <select data-placeholder="Search type" class="tom-select w-full" name="Frquency">
                        <option value="0" selected disabled> Select Frequency</option>
                        <option value="Daily">Daily</option>
                        <option value="Weekly">Weekly</option>
                        <option value="Forthnigthly">Forthnigthly</option>
                        <option value="Monthly">Monthly</option>
                        <option value="Quarterly">Quarterly</option>
                        <option value='Half-yearly'>Half-yearly</option>
                        <option value="Annually">Annually</option>

                    </select>

                </div>
            </div>


        </div>

        <div id="extrpt" class="hidden">
            @*<div>
                <h3 class="text-black">Report / App Details:</h3>
            </div>*@

            <div class="grid 2xl:grid-cols-3 grid-cols-2 mb-5 md:gap-y-4 gap-x-4 gap-y-5" >
                <div class="grid grid-cols-3 items-center mt-3" id="streamName">
                    <label class="form-label">Qlik Stream Name:</label>
                    <div class="col-span-2 flex flex-row form-control">
                        <select data-placeholder="Search type" class="tom-select w-full" name="StreamName">
                            <option value="0" selected disabled> Select Stream</option>
                            @foreach (var item in @Model.StreamList)
                            {
                            <option value="@item"> @item</option>
                            }

                        </select>
                    </div>
                </div>
                <div class="grid grid-cols-3 items-center mt-3 hidden" id="AppName">
                    <label class="form-label">Report / App Name:</label>
                    <div class="col-span-2 flex flex-row form-control">
                        <select data-placeholder="Search type" class="tom-select w-full" name="AppName">
                            <option value="0" selected disabled> Select App Name</option>
                            @foreach (var item in @Model.AppList)
                            {
                                <option value="@item"> @item</option>
                            }

                        </select>
                    </div>

                    @*<div class="col-span-2 flex flex-row">
                        <input id="App-Name" type="text" class="form-control" placeholder="App Name" name="AppName">
                    </div>*@
                </div>
                <div class="grid grid-cols-3 items-center mt-3 hidden" id="SheetName">
                    <label class="form-label">Sheet Name:</label>
                    <div class="col-span-2 flex flex-row">
                        <input id="Sheet-Name" type="text" class="form-control" placeholder="Sheet Name" name="SheetName">
                    </div>
                </div>

            </div>
        </div>

        <div class="grid 2xl:grid-cols-3 grid-cols-2 mb-5 md:gap-y-4 gap-x-4 gap-y-5">
            <div class="grid grid-cols-3 items-center mt-3">
                <label class="form-label">Approver ID:</label>
                <div class="col-span-2 flex flex-row">
                    <input id="ApproverId" type="text" class="form-control" placeholder="Approver AD ID/ UserID" name="ApprovedUser">
                </div>
            </div>
            <div class="grid grid-cols-2 items-center mt-3">
                <h3 id="Approver-Name" class="hidden">Name:</h3>
                <h3 id="Approver-Desig" class="hidden">Designation:</h3>
            </div>
        </div>

        <div class="grid 2xl:grid-cols-3 grid-cols-2 mb-5 md:gap-y-4 gap-x-4 gap-y-5 hidden" id="divForwarding">
            <div class="grid grid-cols-3 items-center mt-3">
                <label class="form-label">* Forwarding ID:</label>
                <div class="col-span-2 flex flex-row">
                    <input id="ForwardingId" type="text" class="form-control" placeholder="Forwarding AD ID/ UserID" name="EndorsedUser">
                </div>
                
            </div>
            <div class="grid grid-cols-2 items-center mt-3">
                <h3 id="Forwarding-Name" class="hidden">Forwarding Name:</h3>
                <h3 id="Forwarding-Desig" class="hidden">Forwarding Designation:</h3>
            </div>
            
            <div class="col-span-10">
                <p class="form-label mr-2" style=" display: inline; font-size: 13px; color: darkgrey;">* Forwarding ID should be CM/ AGM/ DGM rank only.</p>
            </div>

        </div>
        



        
        <div>
            <div>
                <div class="flex flex-col space-y-4 pt-8 ">
                    <hr class="border-t border-gray-300">
                </div>

                <div class="dropzone mt-6 grid" >
                    <style>
                        .file-drop-area {
                             justify-content: center;
                            position: relative;
                            display: flex;
                            align-items: center;
                            /* height: 100%; */
                            width: 100%;
                            max-width: 100%;
                            /* padding: 25px; */
                            /* background-color: #fff; */
                            /* border-radius: 12px; */
                            box-shadow: 0 10px 20px rgba(0,0,0,.1);
                            transition: .3s;
                            padding:0;
                            margin:0;
                        }

                        .input-file-upld {
                            position: absolute;
                            left: 0;
                            top: 0;
                            width: 100%;
                            height: 100%;
                            cursor: pointer;
                            opacity: 0;
                            padding:0;
                            margin:0;
                        }

                        .fake-btn {
                            flex-shrink: 0;
                            background-color: #9699b3;
                            border-radius: 3px;
                            padding: 8px 15px;
                            margin-right: 10px;
                            /*font-size: 12px;*/
                            text-transform: uppercase;
                          }
  
                          .file-msg {
                            color: #9699b3;
                            font-size: 16px;
                            
                            line-height: 1.4;
                            white-space: nowrap;
                            overflow: hidden;
                            text-overflow: ellipsis;
                          }
  
                          .item-delete {
                            display: none;
                            position: absolute;
                            right: 10px;
                            width: 18px;
                            height: 18px;
                            cursor: pointer;
                          }
  
                          .item-delete:before {
                            content: "";
                            position: absolute;
                            left: 0;
                            transition: .3s;
                            top: 0;
                            z-index: 1;
                            width: 100%;
                            height: 100%;
                            background-size: cover;
                            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg fill='%23bac1cb' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 438.5 438.5'%3e%3cpath d='M417.7 75.7A8.9 8.9 0 00411 73H323l-20-47.7c-2.8-7-8-13-15.4-18S272.5 0 264.9 0h-91.3C166 0 158.5 2.5 151 7.4c-7.4 5-12.5 11-15.4 18l-20 47.7H27.4a9 9 0 00-6.6 2.6 9 9 0 00-2.5 6.5v18.3c0 2.7.8 4.8 2.5 6.6a8.9 8.9 0 006.6 2.5h27.4v271.8c0 15.8 4.5 29.3 13.4 40.4a40.2 40.2 0 0032.3 16.7H338c12.6 0 23.4-5.7 32.3-17.2a64.8 64.8 0 0013.4-41V109.6h27.4c2.7 0 4.9-.8 6.6-2.5a8.9 8.9 0 002.6-6.6V82.2a9 9 0 00-2.6-6.5zm-248.4-36a8 8 0 014.9-3.2h90.5a8 8 0 014.8 3.2L283.2 73H155.3l14-33.4zm177.9 340.6a32.4 32.4 0 01-6.2 19.3c-1.4 1.6-2.4 2.4-3 2.4H100.5c-.6 0-1.6-.8-3-2.4a32.5 32.5 0 01-6.1-19.3V109.6h255.8v270.7z'/%3e%3cpath d='M137 347.2h18.3c2.7 0 4.9-.9 6.6-2.6a9 9 0 002.5-6.6V173.6a9 9 0 00-2.5-6.6 8.9 8.9 0 00-6.6-2.6H137c-2.6 0-4.8.9-6.5 2.6a8.9 8.9 0 00-2.6 6.6V338c0 2.7.9 4.9 2.6 6.6a8.9 8.9 0 006.5 2.6zM210.1 347.2h18.3a8.9 8.9 0 009.1-9.1V173.5c0-2.7-.8-4.9-2.5-6.6a8.9 8.9 0 00-6.6-2.6h-18.3a8.9 8.9 0 00-9.1 9.1V338a8.9 8.9 0 009.1 9.1zM283.2 347.2h18.3c2.7 0 4.8-.9 6.6-2.6a8.9 8.9 0 002.5-6.6V173.6c0-2.7-.8-4.9-2.5-6.6a8.9 8.9 0 00-6.6-2.6h-18.3a9 9 0 00-6.6 2.6 8.9 8.9 0 00-2.5 6.6V338a9 9 0 002.5 6.6 9 9 0 006.6 2.6z'/%3e%3c/svg%3e");
                          }
  
                          .item-delete:after {
                            content: "";
                            position: absolute;
                            opacity: 0;
                            left: 50%;
                            top: 50%;
                            width: 100%;
                            height: 100%;
                            transform: translate(-50%, -50%) scale(0);
                            background-color: #f3dbff;
                            border-radius: 50%;
                            transition: .3s;
                          }
  
                          .item-delete:hover:after {
                            transform: translate(-50%, -50%) scale(2.2);
                            opacity: 1;
                          }
  
                          .item-delete:hover:before {
                            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg fill='%234f555f' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 438.5 438.5'%3e%3cpath d='M417.7 75.7A8.9 8.9 0 00411 73H323l-20-47.7c-2.8-7-8-13-15.4-18S272.5 0 264.9 0h-91.3C166 0 158.5 2.5 151 7.4c-7.4 5-12.5 11-15.4 18l-20 47.7H27.4a9 9 0 00-6.6 2.6 9 9 0 00-2.5 6.5v18.3c0 2.7.8 4.8 2.5 6.6a8.9 8.9 0 006.6 2.5h27.4v271.8c0 15.8 4.5 29.3 13.4 40.4a40.2 40.2 0 0032.3 16.7H338c12.6 0 23.4-5.7 32.3-17.2a64.8 64.8 0 0013.4-41V109.6h27.4c2.7 0 4.9-.8 6.6-2.5a8.9 8.9 0 002.6-6.6V82.2a9 9 0 00-2.6-6.5zm-248.4-36a8 8 0 014.9-3.2h90.5a8 8 0 014.8 3.2L283.2 73H155.3l14-33.4zm177.9 340.6a32.4 32.4 0 01-6.2 19.3c-1.4 1.6-2.4 2.4-3 2.4H100.5c-.6 0-1.6-.8-3-2.4a32.5 32.5 0 01-6.1-19.3V109.6h255.8v270.7z'/%3e%3cpath d='M137 347.2h18.3c2.7 0 4.9-.9 6.6-2.6a9 9 0 002.5-6.6V173.6a9 9 0 00-2.5-6.6 8.9 8.9 0 00-6.6-2.6H137c-2.6 0-4.8.9-6.5 2.6a8.9 8.9 0 00-2.6 6.6V338c0 2.7.9 4.9 2.6 6.6a8.9 8.9 0 006.5 2.6zM210.1 347.2h18.3a8.9 8.9 0 009.1-9.1V173.5c0-2.7-.8-4.9-2.5-6.6a8.9 8.9 0 00-6.6-2.6h-18.3a8.9 8.9 0 00-9.1 9.1V338a8.9 8.9 0 009.1 9.1zM283.2 347.2h18.3c2.7 0 4.8-.9 6.6-2.6a8.9 8.9 0 002.5-6.6V173.6c0-2.7-.8-4.9-2.5-6.6a8.9 8.9 0 00-6.6-2.6h-18.3a9 9 0 00-6.6 2.6 8.9 8.9 0 00-2.5 6.6V338a9 9 0 002.5 6.6 9 9 0 006.6 2.6z'/%3e%3c/svg%3e");
                          }

                        .upload {
                            right:4%;
                            position:absolute;
                        }

                        .progress-bar{
                            display:none;
                            position:absolute;
                            left: 70%;
                            align-items:center;
                            height: 6px;
                            width: 10%;
                            background: rgba(0,0,0,.1);
                            border-radius: 30px;
                        }

                        .progress {
                            height:100%;
                            width: 10%;
                            background:#6990f2;
                            border-radius:inherit;
                        }
                        .size {
                            display:none;
                            position:absolute;
                            left: 81%;
                            width: 0%;
                        }

                    </style>
                    <div class="file-drop-area">
                        <div class="fake-btn">Choose files </div>
                        <div class="file-msg">or drop files here </div>
                        <input name="File" type="file" id="input-file-upload" accept="text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" class="input-file-upld" />
                        
                        <div class="progress-bar">
                            <div class="progress"></div>
                        </div>
                        <div class="size">0KB</div>
                        <div class="upload hidden"><span class="mr-1">0%</span>Uploaded..</div>

                        <div class="item-delete"></div>
                    </div>

                    @*<div class="fallback"> <input name="file" type="file" accept="text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" /> </div>
                    <div class="dz-message" data-dz-message>
                        <div class="text-lg font-medium">Drop files here or click to upload.</div>
                        
                    </div>*@
                </div>

                @*<div data-file-types="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" class="dropzone" style="height: 100px;">
                        <div class="fallback">  </div>
                        <div class="dz-message" data-dz-message>
                            <div class="text-lg font-medium">Drop files here or click to upload.</div>
                            <div class="text-slate-300">
                                This is just a demo dropzone. Selected files are <span class="font-medium">not</span> actually uploaded.submit_btn
                            </div>
                        </div>
                    </div>*@
                @*<div  class="dropzone">
                    <div class="fallback"> <input name="file" type="file" accept="text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" /> </div>
                    <div class="dz-message" data-dz-message>
                        <div class="text-lg font-medium">Drop files here or click to upload.</div>
                        <div class="text-slate-500"> This is just a demo dropzone. Selected files are <span class="font-medium">not</span> actually uploaded. </div>
                    </div>
                </div>*@ 

                <div class="flex flex-col space-y-4 pt-8 pb-4">

                    <hr class="border-t border-gray-300">

                </div> 
                <label class="form-label mr-2" style=" display: inline; font-size: 13px; color: darkgrey;">* Accepted file formats : .csv, .xls, .xlsx - File Size Max - 5 Mb</label>
                <div class="intro-y col-span-12 flex items-center justify-center sm:justify-end mt-5">
                    @*<button class="btn btn-secondary w-24">Clear Form</button>*@
                    <button class="btn btn-primary w-36 ml-2" id="submit_btn" type="button">SUBMIT <i data-lucide="chevrons-right" class="w-4 h-4 ml-2"></i></button>
                </div>
            </div>

        </div>
    </div>
}

    <!-- BEGIN: Modal Content -->
    <div id="myModal" class="modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-body p-10 text-center" id="myModelText"> </div>
                <img src="~/dist/images/PII Elements.png" />
            </div>
        </div>
    </div>
    <!-- END: Modal Content -->
</div>
<!-- END: Wizard Layout -->
<!-- content End -->

@section Scripts{
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/additional-methods.min.js"></script>
    <script>
    $(function () {
        if("@Model.OfficeType" == "BCC")
        { $("#BCC").prop("checked",true);}
            else if("@Model.OfficeType" == "RO")
            { $("#RO").prop("checked",true);}
            else if("@Model.OfficeType" == "ZO")
            {$("#ZO").prop("checked",true);} 
            else if("@Model.OfficeType" == "OVERSEAS")
            { $("#OVERSEAS").prop("checked", true); }

        let UploaderFlag = "Y";
        let totalFileCount = 0;

        //window.addEventListener("onbeforeunload" , function(e){
        //    e.returnValue = "R u sure!?";
        //});

        const validExtention = ["text/csv","application/vnd.ms-excel","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"];
        $("#input-file-upload").on("change", function () {
            
            let filesCount = $(this)[0].files.length;
            let $textContainer = $(this).prev();
            let filesSize = $(this)[0].files[0].size;
            totalFileCount = filesCount+totalFileCount;
            if(totalFileCount>1)
            {
                fileDelete();
            }
            if($("#input-file-upload").val()&&((filesSize/1024)<=0 || (filesSize/(1024*1024)) > 5)){
                alert("File size should be less than 5MB.");
                filesCount = 0;
                
            }
            
            if(!validExtention.includes($(this)[0].files[0].type))
            {
                alert("Invalid extention type of attached file.");
                filesCount = 0;
                

            }
            
            if (filesCount === 1 && UploaderFlag == "Y") {
                let fileName = $(this).val().split("\\").pop();
                $textContainer.text(fileName);
                $(".item-delete").css("display", "inline-block");
                $(".size").css("display", "flex");
                $(".progress-bar").css("display", "flex");
                $(".upload").removeClass("hidden");
                
                let _data = new FormData;
                _data.append("File",$(this)[0].files[0]);

                console.log(_data);

                $.ajax({

                    method: "POST",
                    url: "../DERF/FileUpload",
                    data: _data,
                    dataType: "json",
                    cache:false,
                    contentType:false,
                    processData:false,
                    success: function (data) {
                        data = JSON.parse(data);
                        UploaderFlag = "Y";
                        console.log(data);
                    },
                    error: function (data) {
                        console.log(data);
                    },

                    xhr: function(a) {
                        
                        let fileXhr = $.ajaxSettings.xhr();
                        if(fileXhr.upload){
                            fileXhr.upload.addEventListener("progress",function(e){
                                //console.log(e);
                                UploaderFlag = "N";
                                if(e.lengthComputable)
                                {
                                    var percentage = Math.ceil((e.loaded / e.total) * 100);

                                    

                                    let fileSize ;
                                    if(e.total >= 0 && e.total <1048576) {
                                        fileSize = (e.total/1024).toFixed(2) +"KB";
                                    }else{
                                        fileSize = (e.total/1048576).toFixed(2) +"MB";
                                    }

                                    $(".progress").css("width", `${percentage}%`);
                                    $(".upload span").text(`${percentage}%`);
                                    $(".size").text(`${fileSize}`);
                                }


                            },false);
                        }
                        return fileXhr;
                    }

                });


            } else if (filesCount === 0) {
                $textContainer.text("or drop files here");
                $(".item-delete").css("display", "none");
                $(".size").css("display", "none");
                $(".progress-bar").css("display", "none");
                $(".upload").addClass("hidden");
            } else {
                alert("File already selected or uploading.");
            }

        })

            $(".item-delete").on("click", function () {
                fileDelete();
                $("#input-file-upload").val(null);
                $(".file-msg").text("or drap files here");
                $(".item-delete").css("display", "none");
                $(".size").css("display", "none");
                $(".progress-bar").css("display", "none");
                $(".upload").addClass("hidden");
        });

            function fileDelete(){
                $.ajax({
                    method: "POST",
                    url: "../DERF/FileDelete",
                    success: function (data) {
                        data = JSON.parse(data);
                        console.log(data);
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            }


        });
    </script>
<script>
    $(function () {

        const myModal = tailwind.Modal.getOrCreateInstance(document.querySelector("#myModal"));

        $("#PIIElemetnImage").click(function(e){e.preventDefault()
            
            myModal.show();
        });
        
        $('a[href="#"]').click(function(e){e.preventDefault ? e.preventDefault() : e.returnValue = false;});

        let chk_btn1 = false;
        let chk_btn2 = false;
        //Banks-Internal External
        //console.log(chk_btn1 + chk_btn2);
        $("#Banks-Internal").change(function () { 
            if ($("#Banks-Internal").is(":checked")) {
                $("#Banks-Internal-sub").removeClass("hidden");
                $("#External-sub").addClass("hidden"); 
                $("#External-sub :nth-child(2) :nth-child(1)").prop("selected", false);
                //$("#External-sub :nth-child(2) :nth-child(1)").attr("name","PurposeSubCat2");
                $("[name=PurposeSubCat]").attr("name","PurposeSubCat2");
                $("#Banks-Internal-sub :nth-child(2) :nth-child(1)").attr("name","PurposeSubCat");
            }
        })
        
        $("#External").change(function () {
            if ($("#External").is(":checked")) {
                $("#External-sub").removeClass("hidden");
                $("#Banks-Internal-sub").addClass("hidden"); 
                $("#Banks-Internal-sub :nth-child(2) :nth-child(1)").prop("selected", false);
                //$("#Banks-Internal-sub :nth-child(2) :nth-child(1)").attr("name","PurposeSubCat1");
                $("[name=PurposeSubCat]").attr("name","PurposeSubCat1");
                $("#External-sub :nth-child(2) :nth-child(1)").attr("name","PurposeSubCat");
            }
        })
        //btn-primary-soft btn-secondary-soft
        $("#btn1").click(function (e) {
            e.preventDefault();
            $("#btn1").addClass("btn-primary-soft");
            $("#btn1").removeClass("btn-secondary-soft");
            $("#btn2").addClass("btn-secondary-soft");
            $("#btn2").removeClass("btn-primary-soft");

            $("#newDev").removeClass("hidden");
            $("#extrpt").addClass("hidden");
            $("#extrpt input[type='text']").val('');
            $("#extrpt option[value='0']").prop("selected", true);
            chk_btn1 = true;
            chk_btn2 = false;

            $("#btnchk").val('1');

            //console.log(chk_btn1 + chk_btn2);
        });
        $("#btn2").click(function (e) {
            e.preventDefault();
            $("#btn2").addClass("btn-primary-soft");
            $("#btn2").removeClass("btn-secondary-soft");
            $("#btn1").addClass("btn-secondary-soft");
            $("#btn1").removeClass("btn-primary-soft");

            $("#extrpt").removeClass("hidden");
            $("#newDev").addClass("hidden");
            $("#newDev input[type='text'] input[type='radio'] input[type='number']").val('');
            $("#newDev  input[type='radio']").prop('checked', false);;
            $("#newDev option[value='0']").prop("selected", true);

            chk_btn1 = false;
            chk_btn2 = true;
            $("#btnchk").val('1');
            //console.log(chk_btn1 + chk_btn2);
            $("#streamName").removeClass("hidden");
            $("#AppName").removeClass("hidden");
            $("#SheetName").removeClass("hidden");

            if ($("#newDev  input[type='radio']").prop('checked') == false) {
                $("#Temporary-month").addClass("hidden");
                $("#Pub-freq").addClass("hidden");
                //$("#streamName").addClass("hidden");
            }
        });

        $("#newDev  input[type='radio']").change(function () {
            
            $("#Temporary-month").addClass("hidden");
            $("#Pub-freq").addClass("hidden");
            $("#streamName").addClass("hidden");

            if ($("#Temporary").is(":checked")) {
                $("#Temporary-month").removeClass("hidden");
                $("#Pub-freq").removeClass("hidden");
                $("#streamName").removeClass("hidden");
                $("#extrpt").removeClass("hidden");
                $("#AppName").addClass("hidden");
                $("#SheetName").addClass("hidden");
            }
            
            
            if ($("#Permanent").is(":checked")) {
                $("#Pub-freq").removeClass("hidden");
                $("#Dev-streamName").removeClass("hidden");
                $("#extrpt").removeClass("hidden");
                $("#streamName").removeClass("hidden");
                $("#AppName").addClass("hidden");
                $("#SheetName").addClass("hidden");
            }
            

        });
        $("#ApproverId").prop("disabled", true);
        $("#PIIFlg").change(function () { 
            $("#ApproverId").prop("disabled", false); 
            $("#ApproverId").val("");
            $("#Approver-Name,#Approver-Desig").addClass("hidden");
        } );
        $("#ApproverId").focusout(function () {
            let ApproverId = $("#ApproverId").val();
            if (ApproverId !=''){
                $.ajax({
                    method: "POST",
                    url: "../DERF/GetBussApprover",
                    data: JSON.stringify({ ApproverId: ApproverId }),
                    dataType: "json",
                    contentType: "application/json",
                    success: function (data) {
                        data = JSON.parse(data);
                                        
                        if (data == false)
                        {
                            alert("Approver is not Authorised. Please choose other one.");
                            $("#ApproverId").val("");
                            $("#Approver-Name,#Approver-Desig").addClass("hidden");
                            $("#divForwarding").addClass("hidden");
                        } else if ($("#PIIFlg :selected").val() == 'true' && data.IsPiiApprover == false 
                            //!(data.Grade == "TE7" || data.Grade == "TE8" || data.Grade == "CW7" || data.Grade == "CW8")
                            ) {
                            alert("Approver is not authorized to approve PII elements."); 
                            $("#ApproverId").val("");
                            $("#Approver-Name,#Approver-Desig").addClass("hidden");
                            $("#divForwarding").addClass("hidden");
                        
                        } else {
                            $("#Approver-Name").text("Name:" + data.UserName);
                            $("#Approver-Desig").text("Designation:" + data.Designation);
                            $("#Approver-Name,#Approver-Desig").removeClass("hidden"); 
                            $("#divForwarding").addClass("hidden");
                            if(data.Grade == "TE7" || data.Grade == "TE8" || data.Grade == "CW7" || data.Grade == "CW8")
                            {
                                $("#divForwarding").removeClass("hidden");
                            }
                        }
                    },
                    error: function () {
                        alert("Approver Id Not Found!");
                        $("#ApproverId").val("");
                    }
                })
            } else
            {
                $("#Approver-Name,#Approver-Desig").addClass("hidden");
            }
        });

        $("#ForwardingId").focusout(function () {
            let ForwardingId = $(this).val();
            if (ForwardingId !=''){
                $.ajax({
                    method: "POST",
                    url: "../DERF/GetBussForwarding",
                    data: JSON.stringify({ ForwardingId: ForwardingId }),
                    dataType: "json",
                    contentType: "application/json",
                    success: function (data) {
                        data = JSON.parse(data);
                        if (data == false)
                        {
                            alert("Forwarding ID is not found. Please choose another one.");
                            $("#ForwardingId").val("");
                            $("#Forwarding-Name,#Forwarding-Desig").addClass("hidden");
                        }else
                        {
                            $("#Forwarding-Name").text("Name:" + data.UserName);
                            $("#Forwarding-Desig").text("Designation:" + data.Designation);
                            $("#Forwarding-Name, #Forwarding-Desig").removeClass("hidden"); 
                            
                        }
                    },
                    error: function () {
                        alert("Forwarding Id Not Found!");
                        $("#ForwardingId").val("");
                    }
                })
            }else
            {
                $("#Forwarding-Name,#Forwarding-Desig").addClass("hidden");
            }
        });


        

        $("#formId").validate({
            rules: {
                DeptEmail: {
                    required: true,
                    BobEmail: true
                },
                ContactName: {
                    required: true
                },
                ContactNo: {
                    required: true,
                    mobile:true
                },
                AltContactNo: {
                    altmobile:true
                },
                OfficeType: {
                    required: true,
                    maxlength: 1
                },
                DERFDetails: {
                    required: true,
                    minlength: 70,
                    maxlength: 900
                },
                DataPertain: {
                    required: true

                },
                DataType: {
                    required: true
                },
                Purpose: {
                    required: true
                },
                PurposeDetail: {
                    required: true
                },
                PIIFlg: {
                    required: true
                },
                PurposeSubCat: {
                    required: true
                },

                ApprovedUser: {
                    required:true
                },

                File: {
                    required: true,
                    accept: "text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                },

                btnchk: {
                    btnchk: true
                    
                },
                DevType: {
                    DevType:true
                },
                PeriodInMonth: {
                    PeriodInMonth:true
                },
                ExtractType: {
                    ExtractType:true
                },
                Frquency: {
                    Frquency:true
                },
                StreamName: {
                    StreamName:true
                },
                AppName: {
                    AppName:true
                },
                SheetName: {
                    SheetName:true
                },

                EndorsedUser:{
                    FwdID:true
                },
                

                
                
            },
            messages: {
                DeptEmail: {
                    required: "Enter Department Email Id."

                },
                ContactName: {
                    required: "Please enter Contact Person Name."
                },
                ContactNo: {
                    required: "Please enter Contact Person Mobile No."
                },
                OfficeType: {
                    required: "Please selecte one of Office Type.",
                    maxlength: "Please choose only one of Office Type."
                },
                DERFDetails: {
                    required: "Please enter business logic",
                    minlength: "Business logic definition should be between 70 words to 900 words."
                },
                DataPertain: {
                    required: "Please choose Data Pertaining to field."
                },

                DataType: {
                    required: "Please choose Type of Data field."
                },
                Purpose: {
                    required: "Please choose Purpose of Use field."
                },
                PurposeDetail: {
                    required: "Please Provide Purpose Details."
                },
                PIIFlg: {
                    required: "Please select PII Status of Required Data."
                },
                PurposeSubCat: {
                    required: "Please select purpose sub category of Purpose of Use."
                },
                ApprovedUser: {
                    required: "Please provide approver Id."
                },
                File: {
                    required: "Please upload/ Attached DERF Format",
                    accept: "File should be in .csv, .xls or .xlsx format"
                },
                

            },
            ignore: [],
            errorElement : 'div',
            errorLabelContainer: '.errorTxt'
        });

        //if ($("#formId").valid()) { alert("Form Completed") };

        jQuery.validator.addMethod("BobEmail", function (value, element) {
            return this.optional(element) || /^.+(bankofbaroda.com|bankofbaroda.co.in)$/i.test(value);
        }, "Only Bankofbaroda mail id's are allowed!");

        jQuery.validator.addMethod("mobile", function (value, element) {
            return this.optional(element) || /^[0-9]{10}$/.test(value);
        }, "Enter Valid Mobile No in Contact Person Mobile No");

        
        jQuery.validator.addMethod("altmobile", function (value, element) {
            
            return this.optional(element) || /^[0-9]{5,15}$/.test(value);
        }, "Enter Valid Contact No in Alternate contact No");

        jQuery.validator.addMethod("btnchk", function (value, element) {
            if ($("#btnchk").val() == 0)
            {
                return false;
            }
                
            else
            return true;
        }, "Please check either of Development of New Report or Customization of Existing Report.");

        jQuery.validator.addMethod("DevType", function (value, element) {
            if ($("#btnchk").val() == 0)
                return true;
            else if (chk_btn1 == true && value == undefined) {
                return false;
            } else return true;

        }, "Please choose Development Type option.");
        jQuery.validator.addMethod("PeriodInMonth", function (value, element) {
            if ($("#btnchk").val() == 0)
            { return true; }
            else if (chk_btn1 == true && $("input[name='DevType']:checked").val() == 'Temporary') {
                if (value != '') {
                    return true;
                }
                else { return false; }
            } else return true;
        }, "Please Provide no of month for temporary field.");

        jQuery.validator.addMethod("ExtractType", function (value, element) {
            if ($("#btnchk").val() == 0)
            { return true; }
            else if (value == null && chk_btn1 == true ) return false;
            else return true;

        }, "Please Select Data Extraction Type.");
        jQuery.validator.addMethod("Frquency", function (value, element) {
            if ($("#btnchk").val() == 0)
            { return true; }
            else if (value == null && chk_btn1 == true && $("input[name='DevType']:checked").val() != 'Adhoc' && $("input[name='DevType']:checked").val() != undefined) return false;
            else return true;
        }, "Please Select frequency of App/Report.");
        jQuery.validator.addMethod("StreamName", function (value, element) {
            if ($("#btnchk").val() == 0)
            { return true; }
            else if ((value == null && chk_btn1 == true && $("input[name='DevType']:checked").val() != 'Adhoc' && $("input[name='DevType']:checked").val() != undefined) || (chk_btn2==true && value == null)) return false;
            else return true;
        }, "Please Provide Department Stream Name of Qlik.");
        
        jQuery.validator.addMethod("AppName", function (value, element) {
            if ($("#btnchk").val() == 0)
            { return true; }
            else if (value == null && chk_btn2 == true) return false;
            else return true;
        }, "Please Select App Name.");
        jQuery.validator.addMethod("SheetName", function (value, element) {
            if ($("#btnchk").val() == 0)
            { return true; }
            else if (value == '' && chk_btn2 == true) return false;
            else return true;
        }, "Please Provide Sheet Name");
        //jQuery.validator.addMethod("DevType", function (value, element) { }, "");

        jQuery.validator.addMethod("FwdID", function (value, element) {
            if($("#divForwarding").hasClass("hidden") )
            {
                return true;
            }else if(value.length>0 && !$("#Forwarding-Name").hasClass("hidden"))
            {
                return true;
            }
            else{
                return false;
            }
            
            
            
        }, "Enter Forwarding ID.");

        $("#submit_btn").click(function(e){
            e.preventDefault();
            if($("#formId").valid())
            {
                $("#formId").submit();
            };
        });
    });
    </script>
}

